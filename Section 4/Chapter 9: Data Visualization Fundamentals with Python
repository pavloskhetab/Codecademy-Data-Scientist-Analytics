Line Graphs in Matplotlib

Introduction
Matplotlib is a Python library used to create charts and graphs.

In this first lesson, you will get an overview of the basic commands necessary to build and label a line graph. 
The concepts you will learn include:

Creating a line graph from data
Changing the appearance of the line
Zooming in on different parts of the axis
Putting labels on titles and axes
Creating a more complex figure layout
Adding legends to graphs
Changing tick labels and positions
Saving what you’ve made
By the end of the lesson, you’ll be well on your way to becoming a master at presenting and organizing your data in Python.

To the right, you can see an example of the kind of chart you’ll be able to make by the end of this lesson!



Basic Line Plot
Line graphs are helpful for visualizing how a variable changes over time.

Some possible data that would be displayed with a line graph:

average prices of gasoline over the past decade
weight of an individual over the past couple of months
average temperature along a line of longitude over different latitudes

Using Matplotlib methods, the following code will create a simple line graph using .plot() and display it using .show() :

x_values = [0, 1, 2, 3, 4]
y_values = [0, 1, 4, 9, 16]
plt.plot(x_values, y_values)
plt.show()

x_values is a variable holding a list of x-values for each point on our line graph
y_values is a variable holding a list of y-values for each point on our line graph
plt is the name we have given to the Matplotlib module we have imported at the top of the code
plt.plot(x_values, y_values) will create the line graph
plt.show() will actually display the graph
Our graph would look like this:


Let’s get some practice with plotting lines.

Code:
import codecademylib
from matplotlib import pyplot as plt

days = list(range(7))
money_spent = [10, 12, 12, 10, 14, 22, 24]
print(days)

plt.plot(days, money_spent)
plt.show()
plt.clf()



Basic Line Plot II
We can also have multiple line plots displayed on the same set of axes. This can be very useful if we want to compare two datasets with the same scale and axis categories.

Matplotlib will automatically place the two lines on the same axes and give them different colors if you call plt.plot() twice.

Let’s look at the graph we made in the last exercise to track lunch spending, where days is on the x-axis and spending (money_spent) is on the y-axis:

money_spent

We could add a friend’s lunch spending for comparison like this:

# Days of the week:
days = [0, 1, 2, 3, 4, 5, 6]
# Your Money:
money_spent = [10, 12, 12, 10, 14, 22, 24]
# Your Friend's Money:
money_spent_2 = [11, 14, 15, 15, 22, 21, 12]
# Plot your money:
plt.plot(days, money_spent)
# Plot your friend's money:
plt.plot(days, money_spent_2)
# Display the result:
plt.show()

We then get two lines on the same plot:

money_spent_2

By default, the first line is always blue, and the second line is always orange. In the next exercise, we’ll learn how to customize these lines ourselves.

Code:
import codecademylib
from matplotlib import pyplot as plt

time = [0, 1, 2, 3, 4]
revenue = [200, 400, 650, 800, 850]
costs = [150, 500, 550, 550, 560]

plt.plot(time, revenue)
plt.plot(time, costs)
plt.show()
plt.crf()



Linestyles
We can specify a different color for a line by using the keyword color with either an HTML color name or a HEX code:

plt.plot(days, money_spent, color='green')
plt.plot(days, money_spent_2, color='#AAAAAA')

money_colors

We can also make a line dotted or dashed using the keyword linestyle.

# Dashed:
plt.plot(x_values, y_values, linestyle='--')
# Dotted:
plt.plot(x_values, y_values, linestyle=':')
# No line:
plt.plot(x_values, y_values, linestyle='')

We can also add a marker using the keyword marker:

# A circle:
plt.plot(x_values, y_values, marker='o')
# A square:
plt.plot(x_values, y_values, marker='s')
# A star:
plt.plot(x_values, y_values, marker='*')

To see all of the possible options, check out the Matplotlib documentation. Here are a couple of those values applied to our plots about lunch spending:

plt.plot(days, money_spent, color='green', linestyle='--')
plt.plot(days, money_spent_2, color='#AAAAAA',  marker='o')

linestyles

Let’s get some practice with customizing lines on the same plot.

Code:
import codecademylib
from matplotlib import pyplot as plt

time = [0, 1, 2, 3, 4]
revenue = [200, 400, 650, 800, 850]
costs = [150, 500, 550, 550, 560]

plt.plot(time, revenue, color="purple", linestyle='--')
plt.plot(time, costs, color="#82edc9", marker='s')
plt.show()
plt.clf()



Axis and Labels
Sometimes, it can be helpful to zoom in or out of the plot, 
especially if there is some detail we want to address. To zoom, we can use plt.axis(). 
We use plt.axis() by feeding it a list as input. This list should contain:

The minimum x-value displayed
The maximum x-value displayed
The minimum y-value displayed
The maximum y-value displayed
For example, if we want to display a plot from x=0 to x=3 and from y=2 to y=5, 
we would call plt.axis([0, 3, 2, 5]).

x = [0, 1, 2, 3, 4]
y = [0, 1, 4, 9, 16]
plt.plot(x, y)
plt.axis([0, 3, 2, 5])
plt.show()

Code:
import codecademylib
from matplotlib import pyplot as plt

x = range(12)
y = [3000, 3005, 3010, 2900, 2950, 3050, 3000, 3100, 2980, 2980, 2920, 3010]
plt.plot(x, y)

plt.axis([0, 12, 2900, 3100])

plt.show()



Labeling the Axes
Eventually, we will want to show these plots to other people to convince them of important trends in our data. 
When we do that, we’ll want to make our plots look as professional as possible.

The first step towards a professional-looking plot is adding labels to the x-axis and y-axis, 
and giving the plot a title.

We can label the x- and y- axes by using plt.xlabel() and plt.ylabel(). 
The plot title can be set by using plt.title().

All of these commands require a string, which is a set of characters in either single (') or double (") quotes.

"This is a string"
'This is also a string'

'This is NOT a string (the quotes do not match)"

For example, if someone has been keeping track of their happiness (on a scale out of 10) throughout the day 
and wants to display this information with labeled axes, we can use the following commands:

hours = [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
happiness = [9.8, 9.9, 9.2, 8.6, 8.3, 9.0, 8.7, 9.1, 7.0, 6.4, 6.9, 7.5]
plt.plot(hours, happiness)
plt.xlabel('Time of day')
plt.ylabel('Happiness Rating (out of 10)')
plt.title('My Self-Reported Happiness While Awake')
plt.show()

This will result in a labeled graph:

axis_labels

Now, you can try adding labels to plots of your own.

Code:
import codecademylib
from matplotlib import pyplot as plt

x = range(12)
y = [3000, 3005, 3010, 2900, 2950, 3050, 3000, 3100, 2980, 2980, 2920, 3010]
plt.plot(x, y)
plt.axis([0, 12, 2900, 3100])
plt.xlabel('Time')
plt.ylabel('Dollars spent on coffee')
plt.title('My Last Twelve Years of Coffee Drinking')
plt.show()



Subplots
Sometimes, we want to display two lines side-by-side, rather than in the same set of x- and y-axes. 
When we have multiple axes in the same picture, we call each set of axes a subplot. 
The picture or object that contains all of the subplots is called a figure.

We can have many different subplots in the same figure, and we can lay them out in many different ways. We can think of our layouts as having rows and columns of subplots. 
For instance, the following figure has six subplots split into 2 rows and 3 columns:

We can create subplots using .subplot().

The command plt.subplot() needs three arguments to be passed into it:

The number of rows of subplots
The number of columns of subplots
The index of the subplot we want to create
For instance, the command plt.subplot(2, 3, 4) would create “Subplot 4” from the figure above.

Any plt.plot() that comes after plt.subplot() will create a line plot in the specified subplot. For instance:

# Data sets
x = [1, 2, 3, 4]
y = [1, 2, 3, 4]

# First Subplot
plt.subplot(1, 2, 1)
plt.plot(x, y, color='green')
plt.title('First Subplot')

# Second Subplot
plt.subplot(1, 2, 2)
plt.plot(x, y, color='steelblue')
plt.title('Second Subplot')

# Display both subplots
plt.show()

This would result in a figure with the two plots arranged like this:

Code:
import codecademylib
from matplotlib import pyplot as plt

months = range(12)
temperature = [36, 36, 39, 52, 61, 72, 77, 75, 68, 57, 48, 48]
flights_to_hawaii = [1200, 1300, 1100, 1450, 850, 750, 400, 450, 400, 860, 990, 1000]

plt.subplot(1, 2, 1)
plt.plot(months, temperature, color='green')
plt.title('Temperatures by Month')


plt.subplot(1, 2, 2)
plt.plot(temperature, flights_to_hawaii, "o", color='orange')
plt.title('Flights to Hawaii by Temperature')
plt.show()
plt.clf()



Subplots Part II
Sometimes, when we’re putting multiple subplots together, some elements can overlap and make the figure unreadable:

overlapping

We can customize the spacing between our subplots to make sure that the figure we create is visible and easy to understand. 
To do this, we use the plt.subplots_adjust() command. .subplots_adjust() has some keyword arguments that can move your plots within the figure:

left — the left-side margin, with a default of 0.125. You can increase this number to make room for a y-axis label
right — the right-side margin, with a default of 0.9. You can increase this to make more room for the figure, or decrease it to make room for a legend
bottom — the bottom margin, with a default of 0.1. You can increase this to make room for tick mark labels or an x-axis label
top — the top margin, with a default of 0.9
wspace — the horizontal space between adjacent subplots, with a default of 0.2
hspace — the vertical space between adjacent subplots, with a default of 0.2
For example, if we were adding space to the bottom of a graph by changing the bottom margin to 0.2 (instead of the default of 0.1), we would use the command:

plt.subplots_adjust(bottom=0.2)

We can also use multiple keyword arguments, if we need to adjust multiple margins. For instance, we could adjust both the top and the hspace:

plt.subplots_adjust(top=0.95, hspace=0.25)

Let’s use wspace to fix the figure above:

# Left Plot
plt.subplot(1, 2, 1)
plt.plot([-2, -1, 0, 1, 2], [4, 1, 0, 1, 4])

# Right Plot
plt.subplot(1, 2, 2)
plt.plot([-2, -1, 0, 1, 2], [4, 1, 0, 1, 4])

# Subplot Adjust
plt.subplots_adjust(wspace=0.35)

plt.show()

This would give us figure with a better layout:

Code:
import codecademylib
from matplotlib import pyplot as plt

x = range(7)
straight_line = [0, 1, 2, 3, 4, 5, 6]
parabola = [0, 1, 4, 9, 16, 25, 36]
cubic = [0, 1, 8, 27, 64, 125, 216]

plt.subplot(2, 1, 1)
plt.plot(x, straight_line)

plt.subplot(2,2,3)
plt.plot(x, parabola)

plt.subplot(2,2,4)
plt.plot(x, cubic)

plt.subplots_adjust(wspace =0.35 , bottom =0.2)
plt.show()



Legends
When we have multiple lines on a single graph we can label them by using the command plt.legend().

The legend method takes a list with the labels to display. So, for example, we can call:

plt.plot([0, 1, 2, 3, 4], [0, 1, 4, 9, 16])
plt.plot([0, 1, 2, 3, 4], [0, 1, 8, 27, 64])
plt.legend(['parabola', 'cubic'])
plt.show()

which would display a legend on our graph, labeling each line:legend

plt.legend() can also take a keyword argument loc, which will position the legend on the figure.

These are the position values loc accepts:

Number Code	String
0	best
1	upper right
2	upper left
3	lower left
4	lower right
5	right
6	center left
7	center right
8	lower center
9	upper center
10	center
Note: If you decide not to set a value for loc, it will default to choosing the “best” location.

For, example, we can call plt.legend() and set loc to 6:

plt.legend(['parabola', 'cubic'], loc=6)
plt.show()

which would move the legend to the left side of the graph:legend_loc

Sometimes, it’s easier to label each line as we create it. If we want, we can use the keyword label inside of plt.plot(). 
If we choose to do this, we don’t pass any labels into plt.legend(). For example:

plt.plot([0, 1, 2, 3, 4], [0, 1, 4, 9, 16],
         label="parabola")
plt.plot([0, 1, 2, 3, 4], [0, 1, 8, 27, 64],
         label="cubic")
plt.legend() # Still need this command!
plt.show()

This would display a legend that looks just like what we had before:

Code:
import codecademylib
from matplotlib import pyplot as plt

legend_labels = 'Hyrule', 'Kakariko', 'Gerudo Valley'

months = range(12)
hyrule = [63, 65, 68, 70, 72, 72, 73, 74, 71, 70, 68, 64]
kakariko = [52, 52, 53, 68, 73, 74, 74, 76, 71, 62, 58, 54]
gerudo = [98, 99, 99, 100, 99, 100, 98, 101, 101, 97, 98, 99]

plt.plot(months, hyrule)
plt.plot(months, kakariko)
plt.plot(months, gerudo)

#create your legend here
plt.legend(legend_labels, loc = 8)
plt.show()



Modify Ticks
In all of our previous exercises, our commands have started with plt.. In order to modify tick marks, we’ll have to try something a little bit different.

Because our plots can have multiple subplots, we have to specify which one we want to modify. In order to do that, we call plt.subplot() in a different way.

ax = plt.subplot(1, 1, 1)

ax is an axes object, and it lets us modify the axes belonging to a specific subplot. Even if we only have one subplot, when we want to modify the ticks, 
we will need to start by calling either ax = plt.subplot(1, 1, 1) or ax = plt.subplot() in order to get our axes object.

Suppose we wanted to set our x-ticks to be at 1, 2, and 4. We would use the following code:

ax = plt.subplot()
plt.plot([0, 1, 2, 3, 4], [0, 1, 4, 9, 16])
plt.plot([0, 1, 2, 3, 4], [0, 1, 8, 27, 64])
ax.set_xticks([1, 2, 4])

Our result would look like this:

tick_marks

We can also modify the y-ticks by using ax.set_yticks().

When we change the x-ticks, their labels automatically change to match. But, if we want special labels (such as strings), we can use the command ax.set_xticklabels() or ax.set_yticklabels(). 
For example, we might want to have a y-axis with ticks at 0.1, 0.6, and 0.8, but label them 10%, 60%, and 80%, respectively. To do this, we use the following commands:

ax = plt.subplot()
plt.plot([1, 3, 3.5], [0.1, 0.6, 0.8], 'o')
ax.set_yticks([0.1, 0.6, 0.8])
ax.set_yticklabels(['10%', '60%', '80%'])

This would result in this y-axis labeling:

y_ticks

Now, let’s practice with tick marks.

Code:
import codecademylib
from matplotlib import pyplot as plt

month_names = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep","Oct", "Nov", "Dec"]

months = range(12)
conversion = [0.05, 0.08, 0.18, 0.28, 0.4, 0.66, 0.74, 0.78, 0.8, 0.81, 0.85, 0.85]

plt.xlabel("Months")
plt.ylabel("Conversion")

plt.plot(months, conversion)

# Your work here
ax = plt.subplot()
ax.set_xticks(months)
ax.set_xticklabels(month_names)
ax.set_yticks([0.10, 0.25, 0.5, 0.75])
ax.set_yticklabels(['10%', '25%', '50%', '75%'])
plt.show()



Figures
When we’re making lots of plots, it’s easy to end up with lines that have been plotted and not displayed. 
If we’re not careful, these “forgotten” lines will show up in your new plots. In order to be sure that you don’t have any stray lines, 
you can use the command plt.close('all') to clear all existing plots before you plot a new one.

Previously, we learned how to put two 
Preview: Docs Loading link description
sets
 of axes into the same figure. Sometimes, we would rather have two separate figures. We can use the command plt.figure() to create new figures and size them how we want. 
We can add the keyword figsize=(width, height) to set the size of the figure, in inches. We use parentheses (( and )) to pass in the width and height, which are separated by a comma (,).

To create a figure with a width of 4 inches, and height of 10 inches, we would use:

plt.figure(figsize=(4, 10))

It would look tall and skinny, like this:

tall_fig

Once we’ve created a figure, we might want to save it so that we can use it in a presentation or a website. 
We can use the command plt.savefig() to save out to many different file formats, such as png, svg, or pdf. 
After plotting, we can call plt.savefig('name_of_graph.png'):

# Figure 2
plt.figure(figsize=(4, 10)) 
plt.plot(x, parabola)
plt.savefig('tall_and_narrow.png')

This will save tall_and_narrow.png to our file system.

Code:
import codecademylib
from matplotlib import pyplot as plt

word_length = [8, 11, 12, 11, 13, 12, 9, 9, 7, 9]
power_generated = [753.9, 768.8, 780.1, 763.7, 788.5, 782, 787.2, 806.4, 806.2, 798.9]
years = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009]
plt.close('all')

plt.figure()
plt.plot(years, word_length)
plt.savefig('winning_word_lengths.png')

plt.figure(figsize=(7,3))
plt.plot(years, power_generated)
plt.savefig('power_generated.png')

plt.show()



Review
Now you’ve played around with several two-dimensional line plots in Matplotlib. You’ve seen how you can create simple, readable plots with few commands. 
You’ve also learned some commands to style and label your plots better. These are the concepts you’ve seen in Matplotlib so far:

Creating a line graph from data
Changing the appearance of the line
Zooming in on different parts of the axis
Putting labels on titles and axes
Creating a more complex figure layout
Adding legends to graphs
Changing tick labels and positions
Saving what you’ve made
Moving on, we’ll learn how to make different kinds of plots (beyond line graphs!) in Matplotlib and how to choose between those plots when displaying data.

Let’s do a final round of practice with all of the cool plotting concepts you’ve learned so far!

Instructions
Checkpoint 1 Enabled
1.Define three lists, x, y1, and y2 and fill them with integers. These numbers can be anything you want, but it would be neat to have them be actual metrics that you want to compare. 
This is a fun site you can look at to find example datasets to plot!

Checkpoint 2 Step instruction is unavailable until previous steps are completed
2.Plot y1 vs x and display the plot.

Checkpoint 3 Step instruction is unavailable until previous steps are completed
3.On the same graph, plot y2 vs x (after the line where you plot y1 vs x)

Checkpoint 4 Step instruction is unavailable until previous steps are completed
4.Make the y1 line a pink line and the y2 line a gray line. Give both lines round markers.

Checkpoint 5 Step instruction is unavailable until previous steps are completed
5.Give your graph a title of “Two Lines on One Graph”, and label the x-axis ”Amazing X-axis” and y-axis ”Incredible Y-axis”.

Checkpoint 6 Step instruction is unavailable until previous steps are completed
6.Give the graph a legend and put it in the lower right.

Checkpoint 7 Step instruction is unavailable until previous steps are completed
7.Good job! Feel free to continue playing around in this space. Maybe make some subplots and separate out the lines. 
Maybe practice with zooming in on certain parts of the graph or selecting certain x- or y-ticks to display. When you’re ready, run the code one last time and move on.

Code:
import codecademylib
from matplotlib import pyplot as plt

#data https://www.tylervigen.com/spurious/correlation/5137_popularity-of-the-surprised-pikachu-meme_correlates-with_the-number-of-middle-school-teachers-in-puerto-rico

x=[2010,	2011,	2012,	2013,	2014,	2015,	2016,	2017,	2018,	2019,	2020,	2021,	2022]
y1=[0, 0,	0.142857,	0.25,	0, 0, 0, 0, 24.5714, 35.5833,	21.4167, 12.25, 10.6667] # Popularity of the 'surprised pikachu' meme (Relative popularity)
y2=[630, 670, 800, 610, 710, 850, 1090, 1140, 3500, 3410, 2830, 1900, 2050] # The number of middle school teachers in Puerto Rico (Laborers)

plt.plot(x, y1, color = 'pink', marker = 'o')
plt.plot(x, y2, color = 'gray', marker = 'o')
plt.title('Two Lines on One Graph')
plt.xlabel('Amazing X-axis')
plt.ylabel('Incredible Y-axis')
plt.legend(['Y1', 'Y2'], loc = 4)
plt.show()
#plt.clf()



Different Plot Types
Introduction
In the previous lesson, you learned how to create and label a line plot using Matplotlib! 
In this lesson, you’ll learn how to create and when to use different types of plots:

Compare categories of data with bar graphs
Show uncertainty in data using error bars and shading
Compare proportional datasets using pie charts
Analyze frequency data using histograms
Instructions
Examine the plots in the file system to the right. You will be building these plots throughout the lesson! 
Continue to the next exercise when you’re ready.



Simple Bar Chart
The plt.bar function allows you to create simple bar charts to compare multiple categories of data.

Some possible data that would be displayed with a bar chart:

x-axis — famous buildings, y-axis — heights
x-axis — different planets, y-axis — number of days in the year
x-axis — programming languages, y-axis — lines of code written by you
You call plt.bar with two arguments:

the x-values — a list of x-positions for each bar
the y-values — a list of heights for each bar
In most cases, we will want our x-values to be a list that looks like [0, 1, 2, 3 ...] and has the same number of elements as our y-values list. 
We can create that list manually, but we can also use the following code:

heights = [88, 225, 365, 687, 4333, 10756, 30687, 60190, 90553]
x_values = range(len(heights))

The range function creates a list of consecutive integers (i.e., [0, 1, 2, 3, ...]). It needs an argument to tell it how many numbers should be in the list. 
For instance, range(5) would make a list with 5 numbers. We want our list to be as long as our bar heights (heights in this example). 
len(heights) tell us how many elements are in the list heights.

Here is an example of how to make a bar chart using plt.bar to compare the number of days in a year on the different planets:

days_in_year = [88, 225, 365, 687, 4333, 10756, 30687, 60190, 90553]
plt.bar(range(len(days_in_year)),
        days_in_year)
plt.show()

The result of this is:

planet_bar_chart

At this point, it’s hard to tell what this represents, because it’s unclearly labeled. We’ll fix that in later sections!

In the instructions below, we’ll use plt.bar to create a chart for a fake cafe called MatplotSip. 
We will be comparing the sales of different beverages on a given day.

Code:
import codecademylib
from matplotlib import pyplot as plt

drinks = ["cappuccino", "latte", "chai", "americano", "mocha", "espresso"]
sales =  [91, 76, 56, 66, 52, 27]

plt.bar(range(len(drinks)), sales)
plt.show()



Simple Bar Chart II
When we create a bar chart, we want each bar to be meaningful and correspond to a category of data. 
In the drinks chart from the last exercise, we could see that sales were different for different drink items,
but this wasn’t very helpful to us, since we didn’t know which bar corresponded to which drink.

In the previous lesson, we learned how to customize the tick marks on the x-axis in three steps:

1. Create an axes object

ax = plt.subplot()

2. Set the x-tick positions using a list of numbers

ax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8])

3. Set the x-tick labels using a list of strings

ax.set_xticklabels(['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto'])

If your labels are particularly long, you can use the rotation keyword to rotate your labels 
by a specified number of degrees:

ax.set_xticklabels(['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto'],
rotation=30)

Note: We have to set the x-ticks before we set the x-labels because the default ticks won’t necessarily 
be one tick per bar, especially if we’re plotting a lot of bars. 
If we skip setting the x-ticks before the x-labels, we might end up with labels in the wrong place.

Remember from Lesson I that we can label the x-axis (plt.xlabel) and y-axis (plt.ylabel) as well. 
Now, our graph is much easier to understand:labeled_planet_chart

Let’s add the appropriate labels for the chart you made in the last exercise for the coffee shop, MatplotSip.

Code:
import codecademylib
from matplotlib import pyplot as plt

drinks = ["cappuccino", "latte", "chai", "americano", "mocha", "espresso"]
sales =  [91, 76, 56, 66, 52, 27]

plt.bar(range(len(drinks)), sales)

#create your ax object here
ax = plt.subplot()
ax.set_xticks(range(len(drinks)))
ax.set_xticklabels(drinks)
plt.show()



Side-By-Side Bars
We can use a bar chart to compare two 
Preview: Docs Loading link description
sets
 of data with the same types of axis values. To do this, we plot two sets of bars next to each other, 
so that the values of each category can be compared. 
For example, here is a chart with side-by-side bars for the populations of the United States and 
China over the age of 65 (in percentages):population_bars

(data taken from World Bank)

Some examples of data that side-by-side bars could be useful for include:

the populations of two countries over time
prices for different foods at two different restaurants
enrollments in different 
Preview: Docs Loading link description
classes
 for males and females
In the graph above, there are 7 sets of bars, with 2 bars in each set. 
Each bar has a width of 0.8 (the default width for all bars in Matplotlib).

If our first blue bar is at x=0, then we want the next blue bar to be at x=2, 
and the next to be at x=4, etc.
Our first orange bar should be at x=0.8 (so that it is touching the blue bar), 
and the next orange bar should be at x=2.8, etc.
This is a lot of math, but we can make Python do it for us by copying and pasting this code:

# China Data (blue bars)
n = 1  # This is our first dataset (out of 2)
t = 2 # Number of datasets
d = 7 # Number of sets of bars
w = 0.8 # Width of each bar
x_values1 = [t*element + w*n for element
             in range(d)]

That just generated the first set of x-values. 
To generate the second set, paste the code again, but change n to 2, because this is the second dataset:

# US Data (orange bars)
n = 2  # This is our second dataset (out of 2)
t = 2 # Number of datasets
d = 7 # Number of sets of bars
w = 0.8 # Width of each bar
x_values2 = [t*element + w*n for element
             in range(d)]

Let’s examine our special code:

[t*element + w*n for element in range(d)]

This is called a list comprehension. It’s a special way of generating a list from a formula. 
You can learn more about it in this article. 
For making side-by-side bar graphs, you’ll never need to change this line; 
just paste it into your code and make sure to define n, t, d, and w correctly.

In the instructions below, we’ll experiment with side-by-side bars to 
compare different locations of the MatplotSip coffee empire.

Code:
import codecademylib
from matplotlib import pyplot as plt

drinks = ["cappuccino", "latte", "chai", "americano", "mocha", "espresso"]
sales1 =  [91, 76, 56, 66, 52, 27]
sales2 = [65, 82, 36, 68, 38, 40]

#Paste the x_values code here
n = 1  # This is our first dataset (out of 2)
t = 2 # Number of datasets
d = len(drinks) # Number of sets of bars
w = 0.8 # Width of each bar
store1_x = [t*element + w*n for element
             in range(d)]

plt.bar(store1_x, sales1)

n = 2  # This is our second dataset (out of 2)
t = 2 # Number of datasets
d = len(drinks) # Number of sets of bars
w = 0.8 # Width of each bar
store2_x = [t*element + w*n for element
             in range(d)]
plt.bar(store2_x, sales2)
plt.legend(['Sales1', 'Sales2'])

plt.show()



Stacked Bars
If we want to compare two sets of data while preserving knowledge of the total between them, 
we can also stack the bars instead of putting them side by side. 

A set is an unordered collection of elements without any duplicates.

For instance, if someone was plotting the hours they’ve spent on entertaining themselves with 
video games and books in the past week, and wanted to also get a feel for total hours spent on 
entertainment, they could create a stacked bar chart:

entertainment

We do this by using the keyword bottom. The top set of bars will have bottom set to 
the heights of the other set of bars. So the first set of bars is plotted normally:

video_game_hours = [1, 2, 2, 1, 2]

plt.bar(range(len(video_game_hours)),
  video_game_hours) 

and the second set of bars has bottom specified:

book_hours = [2, 3, 4, 2, 1]

plt.bar(range(len(book_hours)),
  book_hours,
  bottom=video_game_hours)

This starts the book_hours bars at the heights of the video_game_hours bars. 
So, for example, on Monday the orange bar representing hours spent reading will start at 
a value of 1 instead of 0, because 1 hour was spent playing video games.

Let’s try this out with the MatplotSip data from the last exercise.

Code:
import codecademylib
from matplotlib import pyplot as plt

drinks = ["cappuccino", "latte", "chai", "americano", "mocha", "espresso"]
sales1 =  [91, 76, 56, 66, 52, 27]
sales2 = [65, 82, 36, 68, 38, 40]
  
plt.bar(range(len(drinks)), sales1, label = 'Location1')
plt.bar(range(len(drinks)), sales2, bottom=sales1, label = 'Location2')
plt.legend()

plt.show()



Error Bars
In the previous exercise, you learned to represent data as bars of different heights. 
Sometimes, we need to visually communicate some sort of uncertainty in the heights of those bars. Here are some examples:

The average number of students in a 3rd grade classroom is 30, but some 
Preview: Docs Loading link description
classes
 have as few as 18 and others have as many as 35 students.
We measured that the weight of a certain fruit was 35g, but we know that our scale isn’t very precise, 
so the true weight of the fruit might be as much as 40g or as little as 30g.
The average price of a soda is $1.00, but we also want to communicate that the standard deviation is $0.20.

To display error visually in a bar chart, we often use error bars to show where each bar could be, taking 
Preview: Docs The two types of errors in Python are syntax errors and exceptions. 
Exceptions may arise even if the code is syntactically correct.
errors
 into account.

error_bars

Each of the black lines is called an error bar. The taller the bar is, the more uncertain we are 
about the height of the blue bar. The horizontal lines at the top and bottom are called caps. 
They make it easier to read the error bars.

If we wanted to show an error of +/- 2, we would add the keyword yerr=2 to our plt.bar command. 
To make the caps wide and easy to read, we would add the keyword capsize=10:

values = [10, 13, 11, 15, 20]
yerr = 2
plt.bar(range(len(values)), values, yerr=yerr, capsize=10)
plt.show()

If we want a different amount of error for each bar, we can make yerr equal to a list 
rather than a single number:

values = [10, 13, 11, 15, 20]
yerr = [1, 3, 0.5, 2, 4]
plt.bar(range(len(values)), values, yerr=yerr, capsize=10)
plt.show()

This code results in error bars of different sizes:

variable_error

Like the list of x-axis labels, Matplotlib reads this in the same order as the list of y-values. 
So, the first index of your error list should correspond to the first index of your y-values list, 
the second index of your error list should correspond to the second index of your y-values list, and so on.

Code:
import codecademylib
from matplotlib import pyplot as plt

drinks = ["cappuccino", "latte", "chai", "americano", "mocha", "espresso"]
ounces_of_milk = [6, 9, 4, 0, 9, 0]
error = [0.6, 0.9, 0.4, 0, 0.9, 0]

# Plot the bar graph here
plt.bar(range(len(drinks)), ounces_of_milk, yerr=error, capsize=5)

plt.show()



Fill Between
We’ve learned how to display 
Preview: Docs Loading link description
errors
 on bar charts using error bars. Let’s take a look at how we might do this in an aesthetically pleasing way on line graphs. 
In Matplotlib, we can use plt.fill_between() to shade error. This function takes three arguments:

x-values — this works just like the x-values of plt.plot()
lower-bound for y-values — 
Preview: Docs Loading link description
sets
 the bottom of the shaded area
upper-bound for y-values — sets the top of the shaded area
Generally, we use .fill_between() to create a shaded error region, and then plot the actual line over it. 
We can set the alpha keyword to a value between 0 and 1 in the .fill_between() call for transparency so that we can see the line underneath. 
Here is an example of how we would display data with an error of 2:

x_values = range(10)
y_values = [10, 12, 13, 13, 15, 19, 20, 22, 23, 29]
y_lower = [8, 10, 11, 11, 13, 17, 18, 20, 21, 27]
y_upper = [12, 14, 15, 15, 17, 21, 22, 24, 25, 31]

plt.fill_between(x_values, y_lower, y_upper, alpha=0.2) #this is the shaded error
plt.plot(x_values, y_values) #this is the line itself
plt.show()

to Clipboard

This would give us a plot that looks like:fill_between

Having to calculate y_lower and y_upper by hand is time-consuming. If we try to just subtract 2 from y_values, we will get an error.

TypeError: unsupported operand type(s) for -: 'list' and 'int'

to Clipboard

In order to correctly add or subtract from a list, we need to use list comprehension:

y_lower = [i - 2 for i in y_values]

to Clipboard

This command looks at each element in y_values and calls the element its currently looking at i. For each new i, it subtracts 2. 
These opperations create a new list called y_lower.

If we wanted to add 2 to each element in y_values, we use this code:
y_upper = [i + 2 for i in y_values]

Code:
import codecademylib
from matplotlib import pyplot as plt

months = range(12)
month_names = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
revenue = [16000, 14000, 17500, 19500, 21500, 21500, 22000, 23000, 20000, 19500, 18000, 16500]

#your work here
plt.plot(months, revenue)

ax = plt.subplot()
ax.set_xticks(months)
ax.set_xticklabels(month_names)
y_lower = [0.9*i for i in revenue]
y_upper = [1.1*i for i in revenue]
plt.fill_between(months, revenue, y_lower, y_upper, alpha=0.2)
plt.show()



Pie Chart
If we want to display elements of a data set as proportions of a whole, we can use a pie chart.

Pie charts are helpful for displaying data like:

Different ethnicities that make up a school district
Different macronutrients (carbohydrates, fat, protein) that make up a meal
Different responses to an online poll
In Matplotlib, you can make a pie chart with the command plt.pie, passing in the values you want to chart:

budget_data = [500, 1000, 750, 300, 100]

plt.pie(budget_data)
plt.show()

to Clipboard

Which would create a chart like:

budget_skew

This looks weird and tilted. When we make pie charts in Matplotlib, we almost always want to set the axes to be equal to fix this issue. 
To do this, we use plt.axis('equal'), which results in a chart like this:

Code:
import codecademylib
from matplotlib import pyplot as plt
import numpy as np

payment_method_names = ["Card Swipe", "Cash", "Apple Pay", "Other"]
payment_method_freqs = [270, 77, 32, 11]

#make your pie chart here
plt.pie(payment_method_freqs)
plt.axis('equal')
plt.show()



Pie Chart Labeling
We also want to be able to understand what each slice of the pie represents. 
To do this, we can either:

use a legend to label each color, or
put labels on the chart itself.
Method 1
budget_data = [500, 1000, 750, 300, 100]
budget_categories = ['marketing', 'payroll', 'engineering', 'design', 'misc']

plt.pie(budget_data)
plt.legend(budget_categories)

to Clipboard

This puts the category names into a legend on the chart:pie_legend

Method 2
#option 2
plt.pie(budget_data, labels=budget_categories)

to Clipboard

This puts the category names into labels next to each corresponding slice:

pie_labels

One other useful labeling tool for pie charts is adding the percentage of the total that each slice occupies. 
Matplotlib can add this automatically with the keyword autopct. 
We pass in string formatting instructions to format the labels how we want. Some common formats are:

'%0.2f' — 2 decimal places, like 4.08
'%0.2f%%' — 2 decimal places, but with a percent sign at the end, like 4.08%. You need two consecutive percent signs because 
the first one acts as an escape character, so that the second one gets displayed on the chart.
'%d%%' — rounded to the nearest int and with a percent sign at the end, like 4%.
So, a full call to plt.pie might look like:

plt.pie(budget_data,
        labels=budget_categories,
        autopct='%0.1f%%')

to Clipboard

and the resulting chart would look like:budget_chart_full

Code:
import codecademylib
from matplotlib import pyplot as plt

payment_method_names = ["Card Swipe", "Cash", "Apple Pay", "Other"]
payment_method_freqs = [270, 77, 32, 11]

plt.pie(payment_method_freqs, autopct='%0.1f%%')
plt.axis('equal')
plt.legend(payment_method_names, loc=0)
plt.show()



Histogram
Sometimes we want to get a feel for a large dataset with many samples beyond knowing just the basic metrics of mean, median, or standard deviation. 
To get more of an intuitive sense for a dataset, we can use a histogram to display all the values.

A histogram tells us how many values in a dataset fall between different 
Preview: Docs Loading link description
sets
 of numbers (i.e., how many numbers fall between 0 and 10? Between 10 and 20? Between 20 and 30?). 
Each of these questions represents a bin, for instance, our first bin might be between 0 and 10.

All bins in a histogram are always the same size. The width of each bin is the distance between the minimum and maximum values of each bin. 
In our example, the width of each bin would be 10.

Each bin is represented by a different rectangle whose height is the number of elements from the dataset that fall within that bin.

Here is an example:

histogram

To make a histogram in Matplotlib, we use the command plt.hist. plt.hist finds the minimum and the maximum values in your dataset and 
creates 10 equally-spaced bins between those values.

The histogram above, for example, was created with the following code:

plt.hist(dataset) 
plt.show()

to Clipboard

If we want more than 10 bins, we can use the keyword bins to set how many bins we want to divide the data into. The keyword range selects the minimum and maximum values to plot. 
For example, if we wanted to take our data from the last example and make a new histogram that just displayed the values from 66 to 69, divided into 40 bins (instead of 10), 
we could use this function call:

plt.hist(dataset, range=(66,69), bins=40)

to Clipboard

which would result in a histogram that looks like this:

histogram_range

Histograms are best for showing the shape of a dataset. For example, you might see that values are close together, or skewed to one side. With this added intuition, 
we often discover other types of analysis we want to perform.

Code:
import codecademylib
from matplotlib import pyplot as plt
from script import sales_times

#create the histogram here
plt.hist(sales_times, bins=20)
plt.show()



Multiple Histograms
If we want to compare two different distributions, we can put multiple histograms on the same plot. 
This could be useful, for example, in comparing the heights of a bunch of men and the heights of a bunch of women. 
However, it can be hard to read two histograms on top of each other. For example, in this histogram, 
we can’t see all of the blue plot, because it’s covered by the orange one:

overlap_hist

We have two ways we can solve a problem like this:

1. use the keyword alpha, which can be a value between 0 and 1. This 
Preview: Docs Loading link description
sets
 the transparency of the histogram. A value of 0 would make the bars entirely transparent. A value of 1 would make the bars completely opaque.

plt.hist(a, range=(55, 75), bins=20, alpha=0.5)
plt.hist(b, range=(55, 75), bins=20, alpha=0.5)

to Clipboard

This would make both histograms visible on the plot:alpha_histograms

2. use the keyword histtype with the argument 'step' to draw just the outline of a histogram:

plt.hist(a, range=(55, 75), bins=20, histtype='step')
plt.hist(b, range=(55, 75), bins=20, histtype='step')

to Clipboard

which results in a chart like:step_histogram

Another problem we face is that our histograms might have different numbers of samples, making one much bigger than the other. 
We can see how this makes it difficult to compare qualitatively, by adding a dataset b with a much bigger size value:

a = normal(loc=64, scale=2, size=10000)
b = normal(loc=70, scale=2, size=100000)

plt.hist(a, range=(55, 75), bins=20)
plt.hist(b, range=(55, 75), bins=20)
plt.show()

to Clipboard

The result is two histograms that are very difficult to compare:different_hist

To solve this, we can normalize our histograms using density=True. 
This command divides the height of each column by a constant such that the total shaded area of the histogram sums to 1.

a = normal(loc=64, scale=2, size=10000)
b = normal(loc=70, scale=2, size=100000)

plt.hist(a, range=(55, 75), bins=20, alpha=0.5, density=True)
plt.hist(b, range=(55, 75), bins=20, alpha=0.5, density=True)
plt.show()

to Clipboard

Now, we can more easily see the differences between the blue set and the orange set:normalized_hist

Code:



