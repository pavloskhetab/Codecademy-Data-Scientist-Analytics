Line Graphs in Matplotlib

Introduction
Matplotlib is a Python library used to create charts and graphs.

In this first lesson, you will get an overview of the basic commands necessary to build and label a line graph. 
The concepts you will learn include:

Creating a line graph from data
Changing the appearance of the line
Zooming in on different parts of the axis
Putting labels on titles and axes
Creating a more complex figure layout
Adding legends to graphs
Changing tick labels and positions
Saving what you’ve made
By the end of the lesson, you’ll be well on your way to becoming a master at presenting and organizing your data in Python.

To the right, you can see an example of the kind of chart you’ll be able to make by the end of this lesson!



Basic Line Plot
Line graphs are helpful for visualizing how a variable changes over time.

Some possible data that would be displayed with a line graph:

average prices of gasoline over the past decade
weight of an individual over the past couple of months
average temperature along a line of longitude over different latitudes

Using Matplotlib methods, the following code will create a simple line graph using .plot() and display it using .show() :

x_values = [0, 1, 2, 3, 4]
y_values = [0, 1, 4, 9, 16]
plt.plot(x_values, y_values)
plt.show()

x_values is a variable holding a list of x-values for each point on our line graph
y_values is a variable holding a list of y-values for each point on our line graph
plt is the name we have given to the Matplotlib module we have imported at the top of the code
plt.plot(x_values, y_values) will create the line graph
plt.show() will actually display the graph
Our graph would look like this:


Let’s get some practice with plotting lines.

Code:
import codecademylib
from matplotlib import pyplot as plt

days = list(range(7))
money_spent = [10, 12, 12, 10, 14, 22, 24]
print(days)

plt.plot(days, money_spent)
plt.show()
plt.clf()



Basic Line Plot II
We can also have multiple line plots displayed on the same set of axes. This can be very useful if we want to compare two datasets with the same scale and axis categories.

Matplotlib will automatically place the two lines on the same axes and give them different colors if you call plt.plot() twice.

Let’s look at the graph we made in the last exercise to track lunch spending, where days is on the x-axis and spending (money_spent) is on the y-axis:

money_spent

We could add a friend’s lunch spending for comparison like this:

# Days of the week:
days = [0, 1, 2, 3, 4, 5, 6]
# Your Money:
money_spent = [10, 12, 12, 10, 14, 22, 24]
# Your Friend's Money:
money_spent_2 = [11, 14, 15, 15, 22, 21, 12]
# Plot your money:
plt.plot(days, money_spent)
# Plot your friend's money:
plt.plot(days, money_spent_2)
# Display the result:
plt.show()

We then get two lines on the same plot:

money_spent_2

By default, the first line is always blue, and the second line is always orange. In the next exercise, we’ll learn how to customize these lines ourselves.

Code:
import codecademylib
from matplotlib import pyplot as plt

time = [0, 1, 2, 3, 4]
revenue = [200, 400, 650, 800, 850]
costs = [150, 500, 550, 550, 560]

plt.plot(time, revenue)
plt.plot(time, costs)
plt.show()
plt.crf()



Linestyles
We can specify a different color for a line by using the keyword color with either an HTML color name or a HEX code:

plt.plot(days, money_spent, color='green')
plt.plot(days, money_spent_2, color='#AAAAAA')

money_colors

We can also make a line dotted or dashed using the keyword linestyle.

# Dashed:
plt.plot(x_values, y_values, linestyle='--')
# Dotted:
plt.plot(x_values, y_values, linestyle=':')
# No line:
plt.plot(x_values, y_values, linestyle='')

We can also add a marker using the keyword marker:

# A circle:
plt.plot(x_values, y_values, marker='o')
# A square:
plt.plot(x_values, y_values, marker='s')
# A star:
plt.plot(x_values, y_values, marker='*')

To see all of the possible options, check out the Matplotlib documentation. Here are a couple of those values applied to our plots about lunch spending:

plt.plot(days, money_spent, color='green', linestyle='--')
plt.plot(days, money_spent_2, color='#AAAAAA',  marker='o')

linestyles

Let’s get some practice with customizing lines on the same plot.

Code:
import codecademylib
from matplotlib import pyplot as plt

time = [0, 1, 2, 3, 4]
revenue = [200, 400, 650, 800, 850]
costs = [150, 500, 550, 550, 560]

plt.plot(time, revenue, color="purple", linestyle='--')
plt.plot(time, costs, color="#82edc9", marker='s')
plt.show()
plt.clf()



Axis and Labels
Sometimes, it can be helpful to zoom in or out of the plot, 
especially if there is some detail we want to address. To zoom, we can use plt.axis(). 
We use plt.axis() by feeding it a list as input. This list should contain:

The minimum x-value displayed
The maximum x-value displayed
The minimum y-value displayed
The maximum y-value displayed
For example, if we want to display a plot from x=0 to x=3 and from y=2 to y=5, 
we would call plt.axis([0, 3, 2, 5]).

x = [0, 1, 2, 3, 4]
y = [0, 1, 4, 9, 16]
plt.plot(x, y)
plt.axis([0, 3, 2, 5])
plt.show()

Code:
import codecademylib
from matplotlib import pyplot as plt

x = range(12)
y = [3000, 3005, 3010, 2900, 2950, 3050, 3000, 3100, 2980, 2980, 2920, 3010]
plt.plot(x, y)

plt.axis([0, 12, 2900, 3100])

plt.show()



Labeling the Axes
Eventually, we will want to show these plots to other people to convince them of important trends in our data. 
When we do that, we’ll want to make our plots look as professional as possible.

The first step towards a professional-looking plot is adding labels to the x-axis and y-axis, 
and giving the plot a title.

We can label the x- and y- axes by using plt.xlabel() and plt.ylabel(). 
The plot title can be set by using plt.title().

All of these commands require a string, which is a set of characters in either single (') or double (") quotes.

"This is a string"
'This is also a string'

'This is NOT a string (the quotes do not match)"

For example, if someone has been keeping track of their happiness (on a scale out of 10) throughout the day 
and wants to display this information with labeled axes, we can use the following commands:

hours = [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
happiness = [9.8, 9.9, 9.2, 8.6, 8.3, 9.0, 8.7, 9.1, 7.0, 6.4, 6.9, 7.5]
plt.plot(hours, happiness)
plt.xlabel('Time of day')
plt.ylabel('Happiness Rating (out of 10)')
plt.title('My Self-Reported Happiness While Awake')
plt.show()

This will result in a labeled graph:

axis_labels

Now, you can try adding labels to plots of your own.

Code:

