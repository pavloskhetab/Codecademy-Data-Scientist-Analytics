Sampling Distributions Dance Party!
Get your dancing shoes ready! You are a DJ trying to make sure you are ready for a big party. You don’t have time to go through all the songs you can work with. Instead, you want to make sure that any sample of 30 songs from your playlist will get the party started. To do this, you will use the power of sampling distributions!

The dataset we are using for this project can be found here. For simplicity, we have removed some unnecessary columns.

Note that a helper_function.py file is loaded for you in the workspace. This file contains functions that you will use throughout this project. A solution.py file is also loaded for you in the workspace, which contains solution code for this project. We highly recommend that you complete the project on your own without checking the solution, but feel free to take a look if you get stuck or want to check your answers when you’re done!

Tasks
0/17 complete
Mark the tasks as complete by checking them off
Loading in the Data

Task 1
You will be working with a dataset called spotify_data.csv. In script.py, use the read_csv() pandas function to load in spotify_data.csv into a variable called spotify_data.

Task 2
Use the pandas .head() function to preview the spotify_data. If you need a reminder of how to use this function, click the hint below.

Task 3
For this project, we are going to focus on the tempo variable. This column gives the beats per minute (bpm) of each song in spotify.csv. The other columns in our dataset are:

danceability
energy
instrumentalness
liveness
valences
For now, we are going to ignore these other columns.

Create a variable called song_tempos that contains the tempo column data.


Helper Functions
Task 4
Let’s investigate the helper functions we will use in the following sections. A file called helper_functions.py should be opened in the workspace for you. It contains three functions: choose_statistic(), population_distribution(), and sampling_distribution(). The code in these functions is similar to what we saw in the previous lesson, but let’s explore these together.

choose_statistic() allows us to choose a statistic we want to calculate for our sampling and population distributions. It contains two parameters:

x: An array of numbers
sample_stat_text: A string that tells the function which statistic to calculate on x. It takes on three values: “Mean”, “Minimum”, or “Variance”.
population_distribution() allows us to plot the population distribution of a dataframe with one function call. It takes the following parameter:

population_data: the dataframe being passed into the function
sampling_distribution() allows us to plot a simulated sampling distribution of a statistic. The simulated sampling distribution is created by taking random samples of some size, calculating a particular statistic, and plotting a histogram of those sample statistics. It contains three parameters:

population_data: the dataframe being sampled from
samp_size: the size of each sample
stat: the specific statistic being measured for each sample — either “Mean”, “Minimum”, or “Variance”
Read through these functions in helper_function.py to familiarize yourself with them. Click the hint to see examples of population_distribution() and sampling_distribution() being used.

Sampling Distribution Exploration

Now that our data is loaded into script.py and we have gone over the functions in helper_functions.py let’s start our sampling distributions exploration. Make sure to write your code in script.py.

To start off, let’s use the population_distribution() function to graph distribution of song_tempos.

When you click run, you should see a graph with the following title:

Population Distribution

How would you describe this distribution?


Now let’s plot the sampling distribution of the sample mean with sample sizes of 30 songs. To do this, use the sampling_distribution() helper function.

Once you hit run, you should see a graph with the following title:

Sampling Distribution of the Mean
Mean of the Sample Means: {Mean of the Sample Means} 
Population Mean: {Population Mean}


Compare your sampling distribution of the sample means to the population mean. Is the sample mean an unbiased or biased estimator of the population?


Now let’s plot the sampling distribution of the sample minimum with sample sizes of 30 songs. To do this, use the sampling_distribution() helper function.

Once you hit run, you should see a graph with the following title:

Sampling Distribution of the Minimum
Mean of the Sample Minimums: {Mean of the Sample Minimums}
Population Mean: {Population Mean}


Compare your sampling distribution of the sample minimums to the population minimum. Is the sample minimum an unbiased or biased estimator of the population?


Now let’s plot the sampling distribution of the sample variance with sample sizes of 30 songs. To do this, use the sampling_distribution() helper function.

Once you hit run, you should see a graph with the following title:

Sampling Distribution of the Variance
Mean of the Sample Variances: {Mean of the Sample Variances}
Population Variance: {Population Variance}


Compare your sampling distribution of the sample variance to the population variance. Does the sample variance appear to be an unbiased or biased estimator of the population?

Click the hint for more information about sample variance.


Go to line 17 in helper_functions.py. You should see the following line of code:

np.var(x)

Change this to:

np.var(x, ddof=1)

Adding this ddof=1 parameter will divide our input by n-1 instead of n, therefore applying the sample variance formula.

After changing this line of code, run script.py. Does the sample variance appear to be an unbiased or biased estimator of the population?

Calculating Probabilities

We have a good sense of some sample statistics now that we’ve investigated sampling distributions. Let’s take our analysis further by calculating probabilities.

First, calculate the population mean and population standard deviation of song_tempos. Save these values in two separate variables called population_mean and population_std.


Use population_mean and population_std to calculate the standard error of the sampling distribution of the sample mean with a sample size of 30.

Save this value in a variable called standard_error.


You are afraid that if the average tempo of the songs you randomly select is less than 140bpm that your party will not be enjoyable.

Using population_mean and standard_error in a CDF, calculate the probability that the sample mean of 30 selected songs is less than 140bpm.

Remember to print your result into the output terminal.


You know the party will be truly epic if the randomly sampled songs have an average tempo of greater than 150bpm.

Using population_mean and standard_error in a CDF, calculate the probability that the sample mean of 30 selected songs is GREATER than 150bpm.

Remember to print your result into the output terminal.

Does this probability make you feel confident about the party?

Extras

Awesome job! You are ready to throw an awesome party! If you want to do some more exploration of sampling distributions, here are some more opportunities:

Add another sample statistic to the choose_statistic() function in helper_functions.py — such as median, mode, or maximum.
Explore a different column of data from the spotify_data.csv dataset.
Use the sampling distribution of the sample minimum to estimate the probability of observing a specific sample minimum. For example, from the plot, what is the chance of getting a sample minimum that is less than 130bpm?
Happy coding!



helpers.py

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import stats
import seaborn as sns
import codecademylib3

def choose_statistic(x, sample_stat_text):
  # calculate mean if the text is "Mean"
  if sample_stat_text == "Mean":
    return np.mean(x)
  # calculate minimum if the text is "Minimum"
  elif sample_stat_text == "Minimum":
    return np.min(x)
  # calculate variance if the text is "Variance"
  elif sample_stat_text == "Variance":
    return np.var(x)
  # if you want to add an extra stat
  # raise error if sample_stat_text is not "Mean", "Minimum", or "Variance"
  else:
    raise Exception('Make sure to input "Mean", "Minimum", or "Variance"')

def population_distribution(population_data):
  # plot the population distribution
  sns.histplot(population_data, stat='density')
  # informative title for the distribution 
  plt.title(f"Population Distribution")
  # remove None label
  plt.xlabel('')
  plt.show()
  plt.clf()

def sampling_distribution(population_data, samp_size, stat):
  # list that will hold all the sample statistics
  sample_stats = []
  for i in range(500):
    # get a random sample from the population of size samp_size
    samp = np.random.choice(population_data, samp_size, replace = False)
    # calculate the chosen statistic (mean, minimum, or variance) of the sample
    sample_stat = choose_statistic(samp, stat)
    # add sample_stat to the sample_stats list
    sample_stats.append(sample_stat)
  
  pop_statistic = round(choose_statistic(population_data, stat),2)
  # plot the sampling distribution
  sns.histplot(sample_stats, stat='density')
  # informative title for the sampling distribution
  plt.title(f"Sampling Distribution of the {stat} \nMean of the Sample {stat}s: {round(np.mean(sample_stats), 2)} \n Population {stat}: {pop_statistic}")
  plt.axvline(pop_statistic,color='g',linestyle='dashed', label=f'Population {stat}')
  # plot the mean of the chosen sample statistic for the sampling distribution
  plt.axvline(np.mean(sample_stats),color='orange',linestyle='dashed', label=f'Mean of the Sample {stat}s')
  plt.legend()
  plt.show()
  plt.clf()
