Exploratory Data Analysis: Data Visualization
Learn to explore a dataset by visualizing the data.

Introduction
Data visualization is an important component of Exploratory Data Analysis (EDA) because it allows a data analyst to “look at” their data and 
get to know the variables and relationships between them. In order to choose and design a data visualization, it is important to consider two things:

The question you want to answer (and how many variables that question involves).
The data that is available. (is it quantitative or categorical?)
In this article, we’ll use data visualization to explore a dataset from StreetEasy, which contains information about housing rentals in New York City. 
The first few rows of the dataset are printed below (note that we have subsetted the original data for the purposes of this article):

rental_id	building_id	rent	bedrooms	bathrooms	size_sqft	min_to_subway	floor	building_age_yrs	has_roofdeck	has_elevator	has_gym	neighborhood	borough
0	1545	44518357	2550	0.0	1	480	9	2.0	17	1	1	0	Upper East Side	Manhattan
1	2472	94441623	11500	2.0	2	2000	4	1.0	96	0	0	0	Greenwich Village	Manhattan
2	10234	87632265	3000	3.0	1	1000	4	1.0	106	0	0	0	Astoria	Queens
3	2919	76909719	4500	1.0	1	916	2	51.0	29	0	1	0	Midtown	Manhattan
4	2790	92953520	4795	1.0	1	975	3	8.0	31	0	0	0	Greenwich Village	Manhattan

Univariate analysis
Univariate analysis focuses on a single variable at a time. Univariate data visualizations can help us answer questions like:

What is the typical price of a rental in New York City?
What proportion of NYC rentals have a gym?
Depending on the type of variable (quantitative or categorical) we want to visualize, we need to use slightly different visualizations.

Quantitative variables
Box plots (or violin plots) and histograms are common choices for visually summarizing a quantitative variable. 
These plots are useful because they simultaneously communicate information about minimum and maximum values, central location, and spread. 
Histograms can additionally illuminate patterns that can impact an analysis (eg., skew or multimodality).

For example, suppose we are interested in learning more about the price of apartments in NYC. A good starting place is to plot a box plot of the rent variable. 
We could plot a boxplot of rent as follows:

# Load libraries
import seaborn as sns
import matplotlib.pyplot as plt 

# Create the plot
sns.boxplot(x='rent', data=rentals)
plt.show()

boxplot of rental prices showing that the middle 50% of prices are between 2500 and 5000 dollars per month, with many large outliers

We can see that most rental prices fall within a range of $2500-$5000; 
however, there are many outliers, particularly on the high end. 
For more detail, we can also plot a histogram of the rent variable.

# Create a histogram of the rent variable
sns.displot(rentals.rent, bins=10, kde=False)
plt.show()

A seaborn histogram of the `rent` variable that shows the distribution spread between ten bins.


The histogram highlights the long right-handed tail for rental prices. 
We can get a more detailed look at this distribution by increasing the number of bins:

# Create a histogram of the rent variable
sns.displot(rentals.rent, bins=50, kde=False)
plt.show()

A seaborn histogram of the `rent` variable that shows the distribution spread between fifty bins.


Categorical variables
For categorical variables, we can use a bar plot (instead of a histogram) to quickly visualize the frequency (or proportion) of values in each category. 
For example, suppose we want to know how many apartments are available in each borough. We can visually represent that information as follows:

# Create a barplot of the counts in the borough variable
# The palette parameter will set the color scheme for the plot
sns.countplot(x='borough', data=rentals, palette='winter')
plt.show()

A bar plot displaying the distribution of the `borough` variable. The Manhattan category contains ~3500, Queens ~ 500, and Brooklyn ~ 1000.

Alternatively, we could use a pie chart to communicate the same information:

# Define the labels in pie chart
borough_labels = ["Manhattan", "Brooklyn", "Queens"]
 
# Generate pie chart of boroughs
plt.pie(rentals.borough.value_counts(), labels = borough_labels)
plt.show() 

A pie chart displaying the `borough` variable's distribution.

In general, many data analysts avoid pie charts because people are better at visually comparing areas of rectangles than wedges of a pie. 
For a variable with a small number of categories (i.e., fewer than three), a pie chart is a reasonable choice; however, 
for more complex data, a bar chart is usually preferable.

Bivariate analysis
In many cases, a data analyst is interested in the relationship between two variables in a dataset. 
For example:

Do apartments in different boroughs tend to cost different amounts?
What is the relationship between the area of an apartment and how much it costs?
Depending on the types of variables we are interested in, we need to rely on different kinds of visualizations.

One quantitative variable and one categorical variable
Two good options for investigating the relationship between a quantitative variable and a categorical variable are side-by-side box plots and overlapping histograms.

For example, suppose we want to understand whether apartments in different boroughs cost different amounts. 
We could address this question by plotting side by side box plots of rent by borough:

# Create a box plot of the borough variable relative to rent
sns.boxplot(x='borough', y='rent', data=rentals, palette='Accent')
plt.show()

A seaborn box plot showing the rent prices for each category in the `borough` variable.

This plot indicates that rental prices in Manhattan tend to be higher and have more variation than rental prices in other boroughs. 
We could also investigate the same question in more detail by looking at overlapping histograms of rental prices by borough:

plt.hist(rentals.rent[rentals.borough=='Manhattan'], label='Manhattan', density=True, alpha=.5)
plt.hist(rentals.rent[rentals.borough=='Queens'], label='Queens', density=True, alpha=.5)
plt.hist(rentals.rent[rentals.borough=='Brooklyn'], label='Brooklyn', density=True, alpha=.5)
plt.legend()
plt.show()

Overlapping histograms showing rental prices for each borough

Using this visualization, we can see the long right-handed tail in rental prices, especially for Manhattan, and comparatively low prices in Queens.

Two quantitative variables
A scatter plot is a great option for investigating the relationship between two quantitative variables. 
For example, if we want to explore the relationship between rent and size_sqft, we could create a scatter plot of these two variables:

# Create a scatterplot of the size_sqft variable relative to rent
sns.scatterplot(rentals.size_sqft, rentals.rent)
plt.show()

A seaborn scatterplot with rent values along the y-axis, and square footage values along the x-axis.


The plot indicates that there is a strong positive linear relationship between the cost to rent a property and its square footage. 
Larger properties tend to cost more money.

Two categorical variables
Side by side (or stacked) bar plots are useful for visualizing the relationship between two categorical variables. 
For example, suppose we want to know whether rentals that have an elevator are more likely to have a gym. 
We could plot a side by side bar plot as follows:

sns.countplot(x='has_elevator', hue='has_gym', data=rentals)
plt.show()

barplot with has_elevator on the x-axis, and the number of apartments on the y-axis. 
For buildings with an without elevators, counts are split and colored by whether or not the building has a gym.

This plot tells us that buildings with elevators are approximately equally likely to have a gym or not have a gym; 
meanwhile, apartments without elevators are very unlikely to have a gym.

Multivariate analysis
Sometimes, a data analyst is interested in simultaneously exploring the relationship between three or more variables in a single visualization. 
Many of the visualization methods presented up to this point can include additional variables by using visual cues such as colors, shapes, and patterns. 
For example, we can investigate the relationship between rental price, square footage, and borough by using color to introduce our third variable:

sns.scatterplot(rentals.size_sqft, rentals.rent, hue = rentals.borough, palette='bright')
plt.show()

scatter plot of rental prices versus square footage, with each point colored to represent what borough the listing is in

This plot shows many things at once: the positive linear relationship between price and area, 
the fact that Manhattan apartments tend to be larger than the other boroughs (because there are more blue points on the right-hand side of the plot compared to the other colors), 
and that Manhattan apartments tend to cost more money (because the blue points are mostly on top of the green and orange points).

Even though it’s possible to add even more information to this plot (for example, we could use triangles and squares to indicate whether or not an apartment has a gym), 
it’s not always a good idea to overload a single visualization.

Another common data visualization for multivariate analysis is a heat map of a correlation matrix for all quantitative variables:

# Define the colormap which maps the data values to the color space defined with the diverging_palette method  
colors = sns.diverging_palette(150, 275, s=80, l=55, n=9, as_cmap=True)

# Create heatmap using the .corr method on df, set colormap to cmap
sns.heatmap(rentals.corr(), center=0, cmap=colors, robust=True)
plt.show()

heatmap showing correlations between each pair of quantitative variables in the dataset (visualized as a grid of squares, with each variable name labeling the x and y axes). 
Dark purple squares indicate strong correlations, whereas dark green colors indicate negative correlations.

This heat map shows is that the rental price, number of bedrooms, number of bathrooms, 
and size of an apartment are all highly positively correlated (higher values of one are associated with higher values of the others). 
Meanwhile, building age is weakly negatively correlated with rent, bathrooms, minutes to the subway, and 
floor (higher values of building age are associated with lower values of these other variables).

Conclusion
In this article, we’ve summarized some of the important considerations 
for choosing a data visualization based on the question a data analyst wants to answer and the type of data that is available. 
When it comes to designing a visualization, there’s no one right way, 
but “looking” at the data is an important component of both choosing a summary statistic and getting to know a dataset.



Visualizing Multivariate Relationships
An introduction to exploring and visualizing multivariate relationships

Introduction
Exploring multivariate relationships is an important skill to have as a data analyst or scientist. 
You might be familiar with univariate (one variable) and bivariate (two variables) analysis. 
However, datasets often contain more than two features, so it’s important to be able to explore and visualize multiple variables at a time.

In this article, you will learn how to visualize multivariate relationships using:

Scatter plots with visual cues
Grouped box plots
Multi-dimensional plots
Let’s get started!

Scatter plots with visual cues
One way to represent multivariate relationships is to use visual cues such as colors, shapes, and sizes in a scatter plot. 
Let’s demonstrate an example using life expectancy data from the World Health Organization.

First, let’s load in the data:

# import libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt 

# load in health data
health_data = pd.read_csv('life_expectancy_data.csv')

Next, let’s create a scatter plot using Python’s seaborn library to visualize the relationship between years of education and life expectancy:

# create scatter plot
sns.scatterplot(x = 'Schooling', y = 'LifeExpectancy', data = health_data)
plt.show()

Scatter plot showing the relationship between years of schooling and life expectancy

It is clear from this chart that there is a positive relationship between years of schooling and life expectancy.

Let’s make this analysis more interesting by adding a third variable to the scatter plot using color as a visual cue. 
We can do this by passing in a hue argument:

# scatter plot with a visual cue
sns.scatterplot(x = 'Schooling', y = 'LifeExpectancy', hue = 'Status', palette = 'bright', data = health_data)
plt.show()

Scatter plot showing the relationship between years of schooling, life expectancy, and status

This multivariate visualization provides much more insight than the bivariate visualization above. For example, we can see that:

Years of education and life expectancy have a positive relationship
Individuals in developed countries have more years of schooling than individuals in developing countries
The life expectancy in developed countries is greater than the life expectancy in developing countries
Even though it’s possible to add more variables using additional visual cues, it’s not always a great idea to do so. 
For example, let’s try adding a fourth variable to this visualization using shapes as a visual cue:

# scatter plot with four variables
sns.scatterplot(x = 'Schooling', y = 'LifeExpectancy', hue = 'Status', style = 'Year', data = health_data)
plt.show()

Scatter plot with four variables: years of schooling, life expectancy, status, and year

This chart is overloaded with information and is difficult to read. You always want to make sure your charts are readable and easy to interpret. 
Generally, anything beyond three variables in a scatter plot is probably too much for the human eye to process.

Grouped box plots
Grouped box plots can be used to visualize two categorical variables and a quantitative variable. Having the box plots side-by-side can help you gain useful insights.

For example, let’s take a look at Stack Overflow’s Developer Survey data to learn more about how salary is related to education level and gender.

First, let’s load in the data:

# load in salary data
salary_data = pd.read_csv('survey_data.csv')

Next, let’s create a box plot to show the relationship between education and compensation:

# box plot showing relationship between education and compenstation
sns.boxplot(x = "Education", y = "CompTotal", palette = "pastel", data = salary_data)
plt.show()

Box plot showing the relationship between education and compensation

This chart gives us the relationship between education and compensation, but let’s take it a step further to see whether men and women are paid equally. 
We can use the argument hue to group by gender:

# side-by-side box plots grouped by gender
sns.boxplot(x = "Education", y = "CompTotal", hue = "Gender", palette = "pastel", data = salary_data)
plt.show()

Grouped box plots showing the relationship between education and compensation for men and women

This grouped box plot allows us to compare salaries for men and women with the same level of education.

We can see that among adults in the Less than bachelor's, Bachelor's Education, and Master's groups, 
men tend to earn a higher median salary than women with the same level of education; 
however, this pattern is reversed for men and women with Professional degrees.

Multi-dimensional plots
Another way to represent multivariate relationships is to use multi-dimensional plots. 
For example, if we want to represent three variables in a dataset we can create a 3D scatter plot.

We will use the Python graphing library Plotly to load in a dataset and create an interactive 3D plot.

Let’s load in the iris dataset and visualize the relationship between sepal_length, sepal_width, and petal_width for three different iris species:

# import library
import plotly.express as px

# load in iris data
df = px.data.iris()

# create 3D scatter plot
fig = px.scatter_3d(df, x='sepal_length', y='sepal_width', z='petal_width', color='species')
fig.show()

This code outputs a 3D scatter plot that looks like this:

3D scatterplot showing the relationship between three quantitative variables

Notice how there are now three axes instead of two, allowing you to see your data in a new dimension.

3D plots allow you to see relationships that might not be visible in 2D, such as clusters. 
Interactive graphing libraries such as Plotly allow you to rotate the plot to see points from different angles and zoom into specific areas of interest.

The downside of 3D plots is that they can be difficult to read in two dimensions. 
That means that if you need to write a paper report, a 3D plot might not be the best idea.

Review
Datasets often contain many features, which we can use in a model to make predictions or run an analysis. 
Therefore, it’s important to be able to understand and visualize multiple relationships at once.

In this article, you learned how to represent multivariate data using:

Scatter plots with visual cues
Grouped box plots
Multi-dimensional plots
You are now better equipped to create more meaningful visualizations and to think beyond just simple univariate and bivariate terms.

At the same time, it’s also important to recognize that adding too much to a single visualization makes it more difficult to understand relationships, 
so there’s a limit to what we can explore all at once.



