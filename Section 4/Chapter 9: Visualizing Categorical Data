Visualizing Categorical Data

You work at a veterinary office and want to compare the number of different types of pets people have in a specific town. 
This will give you a sense of what supplies you may need and how many office visits you should expect over the coming year. 
The different types of pets we want to compare are:

Dogs
Cats
Fish
Chinchillas
Birds
Snakes
Lizards
We could summarize this data numerically using a table of frequencies:

Type of Pet	Number of Pets
Dogs	4325
Birds	2423
Cats	5126
Fish	3223
Chinchillas	978
Snakes	1112
Lizards	453

This table of values is informative for a reader. However, it is time-consuming for a casual reader to recognize patterns in the data and pick out useful information. 
We can create a bar chart that displays our data in a way that is easier for readers to digest and more descriptive than a table of values.

Bar chart of the number of pets in the city based on the table of values above

In this example, we can immediately identify the most and least popular pets on the bar chart. 
We also see the range and difference between the number of each pet in each column very clearly.

Instructions
Visualizing categorical data mainly involves the use of pie charts and bar charts. The image to the right shows both of them as well as slight variants. 
In this lesson, we will explore both of these graphs including:

use cases
pros and cons
modifying them for best communication
Let’s get started!



Introduction to Bar Charts
6 min
Now that we have seen what a bar chart looks like, let’s examine more in-depth how and when we utilize them! 
Bar charts are generally used to visualize the relative frequencies of categories within a variable. 
Therefore, they are primarily helpful for visually summarizing categorical variables rather than quantitative variables. 
If you can organize your variable into distinct categories, a bar chart is often a great option! If not, you may need to resort to a different visual.

Once you have your distinct categories, a bar chart is best used to display the different value counts of each category. 
We can also compare means, but we would recommend using a side-by-side box plot for that instead because they give a full picture of the five-number summary.

Vertical vs. Horizontal Bar Charts
Within a bar chart, we have two axes. One axis represents the discrete values within a categorical variable we are comparing, while the other axis measures the counts of each of these values. 
Depending on how we orient these axes, we can either have a horizontal bar chart or a vertical bar chart. Let’s take a look at each below.

Two bar charts: one is horizontal, and one is vertical. Both have five categorical variables along their categorical axes.

Bar Charts vs. Histograms
Finally, we have one last thing to go over before we jump into coding our own charts. 
If you have ever run into histograms, you may notice that bar charts and histograms look almost identical. 
However, these are the key differences between them:

Bar charts are used for categorical variables, while histograms are used for quantitative data.
Histograms must always be arranged in a specific order because they represent a range of numerical values. 
For a bar chart, each bar represents frequencies of category variables within a category. Unless the variable is ordinal, the bars could be arranged in any order.
This image shows the difference between bar charts and histograms. Bar charts noticeably have gaps between the bars, while histograms often have no gaps. 
The histogram also shows numeric ranges along the x-axis, while the bar chart shows categories.

For convenience, click here if you would like to see the above image in a separate window.
Code:
import codecademylib3
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

# add in your answers here!
left_plot = "Bar Chart"
right_plot = "Histogram"

heroes_data = pd.read_csv("heroes_information.csv")
# line of code used to clean up messy data
heroes_data_cleaned = heroes_data[heroes_data.Alignment != "-"]

#### code for left plot
plt.subplot(1, 2, 1)
sns.countplot(heroes_data_cleaned["Alignment"])

#### code for right plot
plt.subplot(1, 2, 2)
sns.histplot(heroes_data_cleaned["Height"])
plt.xlim(0,500)

plt.show()



Bar Chart Area
1 min
Let’s go over one of the most important concepts about bar charts — so important, we gave it its own exercise.

The bars of a bar chart have a couple of key features:

They have lengths that are proportional to the counts they represent
Each bar’s width in the bar chart is the same, meaning each bar’s area is also proportional to the counts they represent.
These features make a bar chart super dependable for representing categorical data.

For any chart like a bar chart, the areas we use to represent values must always be equivalent to the relative sizes of the values they represent.
Otherwise, readers could be misled and potentially identify patterns that do not actually exist.

Instructions
Let’s take a look at the animation to the right. It shows counts transforming into a bar chart. 
Even without the counts, we could see the relative sizes of each bar in the chart:

Bar “a” is half the size of bar “b”.
Bar “b” is half the size of bar “c”.
Bar “c” is twice the size of bar “d”.
Click here if you would like to see the animation in a separate window.

This is accurate according to the counts as well. 
Anytime you see a bar graph, the area should always be proportional to the counts being represented.



Now that we know all about bar charts, let’s create our own in Python! To do this, we are going to use a library called seaborn. 
It creates powerful visuals without any syntax headaches, and it is built off of the Matplotlib library.

Let’s say we have a dataset called flu.csv that says whether patients have tested positive or negative for flu at a clinic in the past week. 
The first five elements in the column Results are shown below.

Results
Positive
Negative
Negative
Negative
Positive

We want to create a bar chart that plots the counts of each of the values positive and negative within the Results column. 
Let’s walk through this with the help of the pandas library and the seaborn library with the following steps:

1) Import the necessary libraries.

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

to Clipboard

2) Import flu.csv using the .read_csv() method. You can inspect the first five rows of the data with the .head() method in pandas.

flu_results = pd.read_csv("flu.csv")
print(flu_results.head())

to Clipboard

3) Plot the counts of your intended category with the .countplot() method in seaborn. The only required argument of this method is the x parameter, which takes in the data column we are plotting. 
In our case, this is the Results column.

sns.countplot(flu_results["Results"])

to Clipboard

4) Show the Plot.

plt.show()

to Clipboard

Our output in this example is:This is bar chart that shows the counts of positive and negative test results from the tests.csv file. 
The number of positive results is about 50 people, and the number of negative test results is about 300.

This builds a basic bar chart. We can customize our .countplot() chart, which we will cover later in this lesson.

We also want to note that the .countplot() method is not the only method that builds bar charts in the seaborn library. barplot() can also be used to plot a bar chart in Python, 
and it is more flexible in that it can use any function to determine the height of the bars. 
For this lesson, we’ve chosen to use .countplot() because the syntax is simpler and does what we need!

Code:
import codecademylib3
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("games.csv")
print(df.head())

sns.countplot(df["victory_status"])
plt.show()
plt.close()



Bar Chart Ordering
11 min
You will often see bar graphs with bars set in a certain order. This can help communicate meaningful features about your data. 
Whether our category labels are ordinal or nominal will affect how we want to order our bars and what features we can emphasize. 
Let’s investigate.

Nominal Data
Nominal data has labels with no specific order. Thus, we have a lot of creative freedom when choosing where each bar goes on our chart. 
One way would order our data is by ascending or descending order. Let’s apply this ordering to our games.csv data using the .value_counts() pandas method in the order parameter.

sns.countplot(df["victory_status"], order=df["victory_status"].value_counts(ascending=True).index)

to Clipboard

The bar chart in this graphic also contains the same data as the above charts. This time the data is set in ascending order. 
The labels are ordered from: "draw", "outoftime", "mate", and "resign."

From the way we ordered the graphs, it is immediately clear that resign is the most common game outcome and the mode of our victory_status column, while draw is the least common.

In the above example we have value_counts(ascending=True). If we want the bars in reverse order, we can take ascending=True out of the .value_counts() method (descending order is the default).
The index call specifies the row labels of the DataFrame.

Ordinal Data
If we are working with ordinal data, we should plot the data according to our categorical variables. 
For example, let’s say we want to plot the number of students per grade level at a college. 
We have a table below, which is a preview data from a students.csv file.

Grade Level
Second Year
Second Year
First Year
Third year
Fourth Year

We can order the categorical values as First Year, Second Year, Third Year, and Fourth Year since they are ordinal. 
Using .countplot(), we can input these as a list in the order parameter.

sns.countplot(df["Grade Level"], order=["First Year", "Second Year", "Third Year", "Fourth Year"])

to Clipboard

A bar chart of the counts of students in each grade level (first year, second year, third year, and fourth year). 
There are about 500 second years, while the rest of the grade levels have about 400 students.

From this chart, we get takeaways that we couldn’t just from looking at the column of data. 
We can see that the college had an influx of students for the second year class, as Second Year is the mode (most observed value) of the Grade Level column of data. 
All other years have roughly the same number of students. Putting bars in order according to the ordinal data helps us see these patterns and make our visuals informative for readers.

Code:
