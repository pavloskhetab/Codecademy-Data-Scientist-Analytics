Visualizing Categorical Data

You work at a veterinary office and want to compare the number of different types of pets people have in a specific town. 
This will give you a sense of what supplies you may need and how many office visits you should expect over the coming year. 
The different types of pets we want to compare are:

Dogs
Cats
Fish
Chinchillas
Birds
Snakes
Lizards
We could summarize this data numerically using a table of frequencies:

Type of Pet	Number of Pets
Dogs	4325
Birds	2423
Cats	5126
Fish	3223
Chinchillas	978
Snakes	1112
Lizards	453

This table of values is informative for a reader. However, it is time-consuming for a casual reader to recognize patterns in the data and pick out useful information. 
We can create a bar chart that displays our data in a way that is easier for readers to digest and more descriptive than a table of values.

Bar chart of the number of pets in the city based on the table of values above

In this example, we can immediately identify the most and least popular pets on the bar chart. 
We also see the range and difference between the number of each pet in each column very clearly.

Instructions
Visualizing categorical data mainly involves the use of pie charts and bar charts. The image to the right shows both of them as well as slight variants. 
In this lesson, we will explore both of these graphs including:

use cases
pros and cons
modifying them for best communication
Let’s get started!



Introduction to Bar Charts
6 min
Now that we have seen what a bar chart looks like, let’s examine more in-depth how and when we utilize them! 
Bar charts are generally used to visualize the relative frequencies of categories within a variable. 
Therefore, they are primarily helpful for visually summarizing categorical variables rather than quantitative variables. 
If you can organize your variable into distinct categories, a bar chart is often a great option! If not, you may need to resort to a different visual.

Once you have your distinct categories, a bar chart is best used to display the different value counts of each category. 
We can also compare means, but we would recommend using a side-by-side box plot for that instead because they give a full picture of the five-number summary.

Vertical vs. Horizontal Bar Charts
Within a bar chart, we have two axes. One axis represents the discrete values within a categorical variable we are comparing, while the other axis measures the counts of each of these values. 
Depending on how we orient these axes, we can either have a horizontal bar chart or a vertical bar chart. Let’s take a look at each below.

Two bar charts: one is horizontal, and one is vertical. Both have five categorical variables along their categorical axes.

Bar Charts vs. Histograms
Finally, we have one last thing to go over before we jump into coding our own charts. 
If you have ever run into histograms, you may notice that bar charts and histograms look almost identical. 
However, these are the key differences between them:

Bar charts are used for categorical variables, while histograms are used for quantitative data.
Histograms must always be arranged in a specific order because they represent a range of numerical values. 
For a bar chart, each bar represents frequencies of category variables within a category. Unless the variable is ordinal, the bars could be arranged in any order.
This image shows the difference between bar charts and histograms. Bar charts noticeably have gaps between the bars, while histograms often have no gaps. 
The histogram also shows numeric ranges along the x-axis, while the bar chart shows categories.

For convenience, click here if you would like to see the above image in a separate window.
Code:
import codecademylib3
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

# add in your answers here!
left_plot = "Bar Chart"
right_plot = "Histogram"

heroes_data = pd.read_csv("heroes_information.csv")
# line of code used to clean up messy data
heroes_data_cleaned = heroes_data[heroes_data.Alignment != "-"]

#### code for left plot
plt.subplot(1, 2, 1)
sns.countplot(heroes_data_cleaned["Alignment"])

#### code for right plot
plt.subplot(1, 2, 2)
sns.histplot(heroes_data_cleaned["Height"])
plt.xlim(0,500)

plt.show()



Bar Chart Area
1 min
Let’s go over one of the most important concepts about bar charts — so important, we gave it its own exercise.

The bars of a bar chart have a couple of key features:

They have lengths that are proportional to the counts they represent
Each bar’s width in the bar chart is the same, meaning each bar’s area is also proportional to the counts they represent.
These features make a bar chart super dependable for representing categorical data.

For any chart like a bar chart, the areas we use to represent values must always be equivalent to the relative sizes of the values they represent.
Otherwise, readers could be misled and potentially identify patterns that do not actually exist.

Instructions
Let’s take a look at the animation to the right. It shows counts transforming into a bar chart. 
Even without the counts, we could see the relative sizes of each bar in the chart:

Bar “a” is half the size of bar “b”.
Bar “b” is half the size of bar “c”.
Bar “c” is twice the size of bar “d”.
Click here if you would like to see the animation in a separate window.

This is accurate according to the counts as well. 
Anytime you see a bar graph, the area should always be proportional to the counts being represented.



Now that we know all about bar charts, let’s create our own in Python! To do this, we are going to use a library called seaborn. 
It creates powerful visuals without any syntax headaches, and it is built off of the Matplotlib library.

Let’s say we have a dataset called flu.csv that says whether patients have tested positive or negative for flu at a clinic in the past week. 
The first five elements in the column Results are shown below.

Results
Positive
Negative
Negative
Negative
Positive

We want to create a bar chart that plots the counts of each of the values positive and negative within the Results column. 
Let’s walk through this with the help of the pandas library and the seaborn library with the following steps:

1) Import the necessary libraries.

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

to Clipboard

2) Import flu.csv using the .read_csv() method. You can inspect the first five rows of the data with the .head() method in pandas.

flu_results = pd.read_csv("flu.csv")
print(flu_results.head())

to Clipboard

3) Plot the counts of your intended category with the .countplot() method in seaborn. The only required argument of this method is the x parameter, which takes in the data column we are plotting. 
In our case, this is the Results column.

sns.countplot(flu_results["Results"])

to Clipboard

4) Show the Plot.

plt.show()

to Clipboard

Our output in this example is:This is bar chart that shows the counts of positive and negative test results from the tests.csv file. 
The number of positive results is about 50 people, and the number of negative test results is about 300.

This builds a basic bar chart. We can customize our .countplot() chart, which we will cover later in this lesson.

We also want to note that the .countplot() method is not the only method that builds bar charts in the seaborn library. barplot() can also be used to plot a bar chart in Python, 
and it is more flexible in that it can use any function to determine the height of the bars. 
For this lesson, we’ve chosen to use .countplot() because the syntax is simpler and does what we need!

Code:
import codecademylib3
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("games.csv")
print(df.head())

sns.countplot(df["victory_status"])
plt.show()
plt.close()



Bar Chart Ordering
11 min
You will often see bar graphs with bars set in a certain order. This can help communicate meaningful features about your data. 
Whether our category labels are ordinal or nominal will affect how we want to order our bars and what features we can emphasize. 
Let’s investigate.

Nominal Data
Nominal data has labels with no specific order. Thus, we have a lot of creative freedom when choosing where each bar goes on our chart. 
One way would order our data is by ascending or descending order. Let’s apply this ordering to our games.csv data using the .value_counts() pandas method in the order parameter.

sns.countplot(df["victory_status"], order=df["victory_status"].value_counts(ascending=True).index)

to Clipboard

The bar chart in this graphic also contains the same data as the above charts. This time the data is set in ascending order. 
The labels are ordered from: "draw", "outoftime", "mate", and "resign."

From the way we ordered the graphs, it is immediately clear that resign is the most common game outcome and the mode of our victory_status column, while draw is the least common.

In the above example we have value_counts(ascending=True). If we want the bars in reverse order, we can take ascending=True out of the .value_counts() method (descending order is the default).
The index call specifies the row labels of the DataFrame.

Ordinal Data
If we are working with ordinal data, we should plot the data according to our categorical variables. 
For example, let’s say we want to plot the number of students per grade level at a college. 
We have a table below, which is a preview data from a students.csv file.

Grade Level
Second Year
Second Year
First Year
Third year
Fourth Year

We can order the categorical values as First Year, Second Year, Third Year, and Fourth Year since they are ordinal. 
Using .countplot(), we can input these as a list in the order parameter.

sns.countplot(df["Grade Level"], order=["First Year", "Second Year", "Third Year", "Fourth Year"])

to Clipboard

A bar chart of the counts of students in each grade level (first year, second year, third year, and fourth year). 
There are about 500 second years, while the rest of the grade levels have about 400 students.

From this chart, we get takeaways that we couldn’t just from looking at the column of data. 
We can see that the college had an influx of students for the second year class, as Second Year is the mode (most observed value) of the Grade Level column of data. 
All other years have roughly the same number of students. Putting bars in order according to the ordinal data helps us see these patterns and make our visuals informative for readers.

Code:
import codecademylib3
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("school_data.csv")
print(df.head())

value_order = ["NOT ENOUGH DATA", "VERY WEAK", "WEAK", "NEUTRAL", "STRONG", "VERY STRONG"]

type_of_data = "ordinal"


# plot using .countplot() method here
sns.countplot(df['Supportive Environment'], order=value_order)
plt.xticks(rotation=30)

# Adjust layout to prevent cutting off labels
plt.tight_layout()

# show your plot here
plt.show()
plt.close()



Pie Charts
2 min
So far in this lesson, we have looked at bar charts as a way to plot categorical data. However, bar charts are not the only option. 
Often, you will run into pie charts as a way to display categorical data. While bar charts are usually used for visualizing a table of frequencies, 
pie charts are an alternative when you want to visualize a table of proportions.

Pie charts are made up of slices that are combined to make a full circle. Each slice represents a proportion, and the sum of each proportion (slice) adds up to 1 (or 100%).

These slices are meant to give viewers a relative size of the data, similar to how bars in a bar chart act. 
The arc length (size of the slice’s angle) of each slice is proportional to the quantity it represents. This also means that the area of each slice is proportional to this quantity as well.

Before we dive into pie chart use cases and how to plot them, we want to address the fact that pie charts are the most issue-ridden graphing visual. 
We will explore why later in this lesson. They are still one of the most commonly used visualization tools, so learning all about them will prove to be vital as a data analyst.

The main reason one would use a pie chart is to represent a part-to-whole relationship in your data. 
If you want to compare relative sizes of your data and see how they all are part of a larger sum while worrying less about their precise sizes, a pie chart may be a good option.

Let’s take a look at an example of a pie chart with some given data. The following table represents the distribution of each various pies ordered at a restaurant known for its worldwide cuisine.

Type of Pie	Proportion
Chicken Pastilla	.28
Meat	.07
Bobotie	.17
Sugar	.11
Puko	.37
The resulting pie chart would look like the following:

Pie chart with a distribution of five types of pies: chicken pastilla, meat, bobotie, sugar, and puko

Instructions
Take a look at the animation on the right. This shows the sectors of the pie chart. Notice a few things:

Both the arc length and area of each sector are proportional to the percentage of the circle it makes up.
The sum of each sector adds up to 100 percent.
It is crucial that any pie chart you see or create follows these two rules.



Plotting Pie Charts Using Matplotlib
7 min
Let’s bake our own pie create our own pie chart using Matplotlib. The seaborn library does not currently have any pie chart libraries.

Let’s say we have the following table that represents the proportion of grades a students gets on tests during their school year:

Grades	Proportions
A	.09
B	.28
C	.41
D	.18
F	.04

First, let’s think about the type of data we are dealing with. Since we have proportions of different categories, we know we are working with categorical data. 
If we want to visualize this on a graph, we can create a pie chart or a bar chart. Let’s create a pie chart!

To create a pie chart in Matplotlib, we go through a few steps (these may vary depending on the format of your data). 
Let’s imagine that the table of values is in a csv file called student_grades.csv, so we can use pandas to access them.

Load in the dataset using pandas
student_grades = pd.read_csv("student_grades.csv")

to Clipboard

Create two variables: one that represents the wedge sizes of your pie chart (each proportion) and one that represents the labels that correspond to each wedge. 
Use pandas to access both columns of data: Grades and Proportion.
wedge_sizes = student_grades["Proportions"]
grade_labels = student_grades["Grades"]

to Clipboard

Plot the wedge sizes and labels. Use the .pie() method from the Matplotlib library. The first parameter is the size of each wedge in the pie chart, and the second is the labels parameter, 
which is a list of the category names.
plt.pie(wedge_sizes, labels = grade_labels)

to Clipboard

Set the pie chart to be a perfect circle using the .axis() method from the Matplotlib library.
plt.axis('equal')

to Clipboard

Give the plot a title and show it.
plt.title(“Student Grade Distribution”)
plt.show()

to Clipboard

Our output in this example is:Pie chart that shows the distribution of student grades from the dictionary variable
Code:
import matplotlib.pyplot as plt
import pandas as pd
import codecademylib3

water_usage = pd.read_csv("water_usage.csv")
print(water_usage.head())

wedge_sizes = water_usage['prop']
pie_labels = water_usage['water_source']

plt.pie(wedge_sizes, labels=pie_labels)
plt.axis('equal')

plt.title('Distribution of House Water Usage')

plt.show()
plt.close()



Pitfalls of Pie Charts
4 min
We have learned about pie charts and their use cases, as well as how to plot them in Python. 
However, while pie charts are commonly used in media and journals, there are several issues that can arise. 
Let’s dig into the use cases of both pie charts and bar charts to gain a better understanding of when it’s best to use one or the other.

Comparing Category Sizes
One of the main points of data visualization is to make it easier for a reader to compare different 
Preview: Docs Loading link description
sets
 of information. Slices on a pie chart are tough to compare as the human eye has difficulty comparing areas. Let’s look at the example below:

In this diagram are three similar pie charts, each with five slices. For all the pie charts, it is tough to decipher the relative sizes of each slice, making them an unideal visualization for the data at hand.

(Source: Wikipedia)

Looking at any of these pie charts, you will struggle to perceive the relative sizes of each slice. If our audience needs this nuanced understanding of the data, a bar chart is much more effective.

In this diagram are three similar bar charts, each one corresponding to the pie charts above. 
For all three bar charts, it is easy to compare the relative sizes of each bar within the graph, making them all an ideal visualization for the data at hand.

(Source: Wikipedia)

Let’s look at the same data represented on bar charts.

You can immediately identify the relative size of each bar here. This would be a case where we should definitely take a pass on the pie.

Code:
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import codecademylib3

pie_data = pd.read_csv("pie_data.csv")

graph_counts = pie_data["values"]

graph_labels = pie_data["labels"]

plt.subplot(1,2,1)
plt.pie(graph_counts, labels = graph_labels)
plt.axis('Equal')
plt.title("Tough to Compare")

plt.subplot(1,2,2)
sns.barplot(graph_labels, graph_counts)
plt.title("Easy to Compare")

plt.show()
plt.close()



Making Your Pie Chart Better
4 min
A good life motto is normally the more slices of pie, the better. Unfortunately, this does not ring true with pie charts. 
With too many slices, trying to decipher the visual becomes cumbersome — sometimes even more cumbersome than reading off data from a table. 
Take a look at the example below. There are twenty wedges in the graph. 
Trying to match each piece to its label is way too much effort when a visual is supposed to make readability simple for the viewer.

A pie chart with too many slices (twenty to be exact). There are numerous labels on the right side of the graph, making it hard to decipher what each slice represents. 
Trying to get any information from this graph would be more difficult than reading the data off a table.

When you find yourself in a situation like this, you have a couple of options.

You can aggregate your pie slices to create fewer while still portraying an informative story.
You can see if a bar chart does a more effective job at portraying the information. 
Bar charts do not suffer nearly as much as pie charts when it comes to visualizing numerous categories. 
This is because they are not constrained to one circle — instead, numerous bars.

Code:
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import codecademylib3

major_data = pd.read_csv("major_data.csv")
print(major_data.head())

major_data_agg = pd.read_csv("major_data_agg.csv")
print(major_data_agg.head())

pie_wedges = major_data["proportion"]
pie_labels = major_data["major"]

pie_wedges_agg = major_data_agg["proportion"]
pie_labels_agg = major_data_agg["department"]

plt.subplot(2,1,1)
plt.pie(pie_wedges, labels = pie_labels)
plt.axis('Equal')
plt.title("Too Many Slices")
plt.tight_layout()

plt.subplot(2,1,2)
plt.pie(pie_wedges_agg, labels=pie_labels_agg)
plt.axis('Equal')
plt.title("Good Number of Slices")
plt.tight_layout()

plt.show()



Review
1 min
Give yourself a pat on the back! You have done some deep dives into two of the most common visuals for categorical data. Let’s review some of the key concepts from this lesson.

Bar Charts
Bar charts are useful for visualizing counts of categorical data.
In a bar chart, the height and area are proportional to the value represented. This makes it easy to compare different 
Preview: Docs Loading link description
variables
 in the bar graph.
Seaborn is a library that makes it easy to create bar charts with the .countplot() method.
Bar charts have the broadest appeal and are the most common go-to when plotting categorical data.
Pie Charts
A pie chart is another way to represent categorical data. Instead of displaying counts of categorical data through bars, 
a pie chart shows a part-to-whole relationship by displaying each variable as a sector on a circle.
In a pie chart, the arc length and area of each sector are proportional to the value they represent.
You can plot pie charts in Python using the .pie() method in Matplotlib. 
*Pie chart sectors often harder to compare than simple bars, and having too many sectors causes clutter in the visual quickly. 
This makes use cases for pie charts more limited.
Instructions
If you would like some opportunity to explore more plotting of categorical variables, we have imported a csv file from Kaggle about animal bites. 
We have previewed the data for you on the left. See if there are any columns of data that you would like to explore through bar charts or pie charts.

Happy Coding!

Code:
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import codecademylib3

df = pd.read_csv("Health_AnimalBites.csv")
print(df.head())

# WhereBittenIDDesc, GenderIDDesc, SpeciesIDDesc

'''
1. Bar Chart Ideas

Bites by Species:
Create a bar chart showing the count of bites by SpeciesIDDesc.

Use different colors to represent species.

Bites by Gender:
Visualize the count of bites by GenderIDDesc.

Consider using a stacked bar chart to break down by another variable, such as SpeciesIDDesc.

Where on the Body:
Create a bar chart showing the count of bites for each WhereBittenIDDesc category.

Add a hue based on GenderIDDesc for further analysis.

Advice Issued:
Show the count of incidents where advice was issued (AdvIssuedYNDesc), grouped by SpeciesIDDesc.

Quarantine Status:
Plot a bar chart comparing SpeciesIDDesc against whether the animals were quarantined (DispositionIDDesc).

Rabies Test Results:
Create a bar chart showing the number of animals in each ResultsIDDesc category.

You could group or color-code the results by SpeciesIDDesc.

Bites by Zip Code:
Plot the count of bites for each victim_zip.

This would be more meaningful with the top 10 or 20 zip codes to avoid overloading the chart.

2. Pie Chart Ideas

Proportion of Bites by Species:
Create a pie chart showing the percentage of total bites contributed by each SpeciesIDDesc.

Bites by Gender:
Visualize the proportion of bites by GenderIDDesc.

Body Parts Most Bitten:
Create a pie chart to show the proportion of bites on different body parts (WhereBittenIDDesc).

Vaccination Status:
Create a pie chart to compare animals vaccinated recently (vaccination_yrs <= 1) vs. those vaccinated longer ago or unknown.

Rabies Test Outcomes:
Use a pie chart to represent the distribution of ResultsIDDesc.

Advice Given:
Show the proportion of cases where advice was issued (AdvIssuedYNDesc).


3. Combined Insights (Advanced)

Stacked Bar Chart of Species and Body Parts:
Create a stacked bar chart with SpeciesIDDesc on the x-axis and the stack representing counts for each WhereBittenIDDesc.

Grouped Bar Chart for Quarantine:
Group DispositionIDDesc (quarantine outcome) by SpeciesIDDesc to identify trends.

Comparing Vaccinated vs. Non-Vaccinated Animals by Species:
Create a grouped bar chart comparing vaccination status (vaccination_yrs categories: e.g., <1 year, 1–3 years, >3 years, Unknown) for each species.
'''

# Bites by Species
species_df = df.SpeciesIDDesc

# 1. Bar Chart: Bites by Species
plt.figure(figsize=(10, 6))  # Adjust figure size for better readability
sns.countplot(x=species_df, order=species_df.value_counts().index)

# Add labels and title
plt.title("Bites by Species", fontsize=16)
plt.xlabel("Species")
plt.ylabel("Count")
plt.xticks(rotation=45)  # Rotate x-axis labels for readability
plt.show()

# Calculate counts of each species
species_counts = species_df.value_counts()

# Print species counts
print(species_counts)

# Define a threshold for grouping
threshold = 50

# Group small categories
species_counts_grouped = species_counts.copy()
small_species = species_counts[species_counts < threshold]
species_counts_grouped = species_counts_grouped[species_counts_grouped >= threshold]
species_counts_grouped["Other"] = small_species.sum()


# 2. Pie Chart: Proportion of Bites by Species (Grouped)
plt.figure(figsize=(8, 8))
plt.pie(
    species_counts_grouped, 
    labels=species_counts_grouped.index, 
    autopct='%1.1f%%', 
    startangle=140
)

# Add a title
plt.title("Proportion of Bites by Species (Grouped)", fontsize=16)
plt.show()


# 3. Advanced Chart: Stacked Bar Chart of Species and Body Parts

