CREATING, LOADING, AND SELECTING DATA WITH PANDAS

Importing the Pandas Module
Pandas is a Python module for working with tabular data (i.e., data in a table with rows and columns). 
Tabular data has a lot of the same functionality as SQL or Excel, but Pandas adds the power of Python.

In order to get access to the Pandas module, we’ll need to install the module and 
then import it into a Python file. 
To learn how to install Python for data analysis on your personal computer, 
please refer to the following Codecademy resources:

Introducing Jupyter Notebook
Setting Up Jupyter Notebook
Getting Started with Jupyter Notebook
Otherwise, let’s move on! The pandas module is usually imported at the top of a Python file under the alias pd.

import pandas as pd

If we need to access the pandas module, we can do so by operating on pd.

In this lesson, you’ll learn the basics of working with a single table in Pandas, such as:

Create a table from scratch
Loading data from another file
Selecting certain rows or columns of a table
Note: In order for Codecademy to properly display data from Pandas, we need to import another special library:

import codecademylib3

When you’re on Codecademy.com, we’ll always provide this import for you at the top of script.py.

When you’re not on Codecademy.com, you won’t need it.

Code:
What can we do with Pandas?
In this example, we'll be working with data from ShoeFly.com, a fictional online shoe store.

# Before we analyze anything, we need to import pandas
import pandas as pd
We can load data into Pandas from a csv (comma-separated variable) file. This data represents purchases from ShoeFly.com.

df = pd.read_csv('shoefly_orders.csv')
Let's examine the first 10 rows of our data!

df.head(10)
id	first_name	last_name	email	shoe_type	shoe_material	shoe_color
0	54791	Rebecca	Lindsay	RebeccaLindsay57@hotmail.com	clogs	faux-leather	black
1	53450	Emily	Joyce	EmilyJoyce25@gmail.com	ballet flats	faux-leather	navy
2	91987	Joyce	Waller	Joyce.Waller@gmail.com	sandals	fabric	black
3	14437	Justin	Erickson	Justin.Erickson@outlook.com	clogs	faux-leather	red
4	79357	Andrew	Banks	AB4318@gmail.com	boots	leather	brown
5	52386	Julie	Marsh	JulieMarsh59@gmail.com	sandals	fabric	black
6	20487	Thomas	Jensen	TJ5470@gmail.com	clogs	fabric	navy
7	76971	Janice	Hicks	Janice.Hicks@gmail.com	clogs	faux-leather	navy
8	21586	Gabriel	Porter	GabrielPorter24@gmail.com	clogs	leather	brown
9	62083	Frances	Palmer	FrancesPalmer50@gmail.com	wedges	leather	white
Let's select everyone who ordered black sandals.

df[(df.shoe_type == 'sandals') & (df.shoe_color == 'black')]
id	first_name	last_name	email	shoe_type	shoe_material	shoe_color
2	91987	Joyce	Waller	Joyce.Waller@gmail.com	sandals	fabric	black
5	52386	Julie	Marsh	JulieMarsh59@gmail.com	sandals	fabric	black
Let's see what Susan Dennis ordered.

df[(df.first_name == 'Susan') & (df.last_name == 'Dennis')]
id	first_name	last_name	email	shoe_type	shoe_material	shoe_color
12	45832	Susan	Dennis	SusanDennis58@gmail.com	ballet flats	fabric	white
It looks like Susan ordered white fabric ballet flats!



Create a DataFrame I
A DataFrame is an object that stores data as rows and columns. 
You can think of a DataFrame as a spreadsheet or as a SQL table. 
You can manually create a DataFrame or fill it with data from a CSV, an Excel spreadsheet, or a SQL query.

DataFrames have rows and columns. Each column has a name, which is a string. 
Each row has an index, which is an integer. 
DataFrames can contain many different data types: strings, ints, floats, tuples, etc.

You can pass in a dictionary to pd.DataFrame(). 
Each key is a column name and each value is a list of column values. 
The columns must all be the same length or you will get an error. 

Here’s an example:

df1 = pd.DataFrame({
    'name': ['John Smith', 'Jane Doe', 'Joe Schmo'],
    'address': ['123 Main St.', '456 Maple Ave.', '789 Broadway'],
    'age': [34, 28, 51]
})

This command creates a DataFrame called df1 that looks like this:

name	address	age
John Smith	123 Main St.	34
Jane Doe	456 Maple Ave.	28
Joe Schmo	789 Broadway	  51

Code:
import codecademylib3
import pandas as pd

df1 = pd.DataFrame({
  'Product ID': [1, 2, 3, 4],
  # add Product Name and Color here
  'Product Name': ['t-shirt', 't-shirt', 'skirt', 'skirt'],
  'Colour': ['blue', 'green', 'red', 'black']
})

print(df1)

	Product ID	Product Name	Colour
0	   1	      t-shirt	      blue
1	   2	      t-shirt	      green
2	   3	      skirt	        red
3	   4  	    skirt	        black



Create a DataFrame II
You can also add data using lists.

For example, you can pass in a list of lists, where each one represents a row of data. 
Use the keyword argument columns to pass a list of column names.

df2 = pd.DataFrame([
    ['John Smith', '123 Main St.', 34],
    ['Jane Doe', '456 Maple Ave.', 28],
    ['Joe Schmo', '789 Broadway', 51]
    ],
    columns=['name', 'address', 'age'])

This command produces a DataFrame df2 that looks like this:

name	address	age
John Smith	123 Main St.	34
Jane Doe	456 Maple Ave.	28
Joe Schmo	789 Broadway	51

In this example, we were able to control the ordering of the columns because we used lists.

Code:
import codecademylib3
import pandas as pd

df2 = pd.DataFrame([
  [1, 'San Diego', 100],
  [2, 'Los Angeles', 120],
  # Fill in rows 3 and 4
  [3, 'San Francisco', 90],
  [4, 'Sacramento', 115]
],
  columns=[
    #add column names here
    'Store ID', 'Location', 'Number of Employees'
  ])

print(df2)

	Store ID	Location	Number of Employees
0	   1	    San Diego	      100
1	   2	    Los Angeles	    120
2	   3	    San Francisco	  90
3	   4	    Sacramento	    115



Comma Separated Variables (CSV)
We now know how to create our own DataFrame. However, most of the time, 
we’ll be working with datasets that already exist. One of the most common formats for big datasets is the CSV.

CSV (comma separated values) is a text-only spreadsheet format. You can find CSVs in lots of places:

Online datasets (here’s an example from data.gov)
Export from Excel or Google Sheets
Export from SQL
The first row of a CSV contains column headings. All subsequent rows contain values. 
Each column heading and each variable is separated by a comma:

column1,column2,column3
value1,value2,value3

That example CSV represents the following table:

column1	column2	column3
value1	value2	value3

Code:
cupcakes.csv

name,cake_flavor,frosting_flavor,topping
Chocolate Cake,chocolate,chocolate,chocolate shavings
Birthday Cake,vanilla,vanilla,rainbow sprinkles
Carrot Cake,carrot,cream cheese,almonds



Loading and Saving CSVs
When you have data in a CSV, you can load it into a DataFrame in Pandas using .read_csv():

pd.read_csv('my-csv-file.csv')

In the example above, the .read_csv() method is called. 
The CSV file called my-csv-file is passed in as an argument.

We can also save data to a CSV, using .to_csv().

df.to_csv('new-csv-file.csv')

In the example above, the .to_csv() method is called on df (which represents a DataFrame object). 
The name of the CSV file is passed in as an argument (new-csv-file.csv). 
By default, this method will save the CSV file in your current directory.

Code:

import codecademylib3
import pandas as pd

df = pd.read_csv('sample.csv')

print(df)



Inspect a DataFrame
When we load a new DataFrame from a CSV, we want to know what it looks like.

If it’s a small DataFrame, you can display it by typing print(df).

If it’s a larger DataFrame, it’s helpful to be able to inspect a few items 
without having to look at the entire DataFrame.

The method .head() gives the first 5 rows of a DataFrame. 
If you want to see more rows, you can pass in the positional argument n. 
For example, df.head(10) would show the first 10 rows.

The method df.info() gives some statistics for each column.

Code:
import codecademylib3
import pandas as pd
#load the CSV below:

df = pd.read_csv('imdb.csv')

print(df.head())

print(df.info())



Select Columns
Now we know how to create and load data. 
Let’s select parts of those datasets that are interesting or important to our analyses.

Suppose you have the DataFrame called customers, which contains the ages of your customers:

name	age
Rebecca Erikson	35
Thomas Roberson	28
Diane Ochoa	42
…	…

Perhaps you want to take the average or plot a histogram of the ages. 
In order to do either of these tasks, you’d need to select the column.

There are two possible syntaxes for selecting all values from a column:

Select the column as if you were selecting a value from a dictionary using a key. 
In our example, we would type customers['age'] to select the ages.
If the name of a column follows all of the rules for a variable name 
(doesn’t start with a number, doesn’t contain spaces or special characters, etc.), 
then you can select it using the following notation: df.MySecondColumn. 
In our example, we would type customers.age.

When we select a single column, the result is called a Series.

Code:
import codecademylib3
import pandas as pd

df = pd.DataFrame([
  ['January', 100, 100, 23, 100],
  ['February', 51, 45, 145, 45],
  ['March', 81, 96, 65, 96],
  ['April', 80, 80, 54, 180],
  ['May', 51, 54, 54, 154],
  ['June', 112, 109, 79, 129]],
  columns=['month', 'clinic_east',
           'clinic_north', 'clinic_south',
           'clinic_west']
)
clinic_north = df.clinic_north

print(type(clinic_north))



Selecting Multiple Columns
When you have a larger DataFrame, you might want to select just a few columns.

For instance, let’s return to a DataFrame of orders from ShoeFly.com:

id	first_name	last_name	email	shoe_type	shoe_material	shoe_color
54791	Rebecca	Lindsay	RebeccaLindsay57@hotmail.com	clogs	faux-leather	black
53450	Emily	Joyce	EmilyJoyce25@gmail.com	ballet flats	faux-leather	navy
91987	Joyce	Waller	Joyce.Waller@gmail.com	sandals	fabric	black
14437	Justin	Erickson	Justin.Erickson@outlook.com	clogs	faux-leather	red

We might just be interested in the customer’s last_name and email. We want a DataFrame like this:

last_name	email
Lindsay	RebeccaLindsay57@hotmail.com
Joyce	EmilyJoyce25@gmail.com
Waller	Joyce.Waller@gmail.com
Erickson	Justin.Erickson@outlook.com

To select two or more columns from a DataFrame, we use a list of the column names. 
To create the DataFrame shown above, we would use:

new_df = orders[['last_name', 'email']]

Note: Make sure that you have a double set of brackets ([[]]), or this command won’t work!

Code:
import codecademylib3
import pandas as pd

df = pd.DataFrame([
  ['January', 100, 100, 23, 100],
  ['February', 51, 45, 145, 45],
  ['March', 81, 96, 65, 96],
  ['April', 80, 80, 54, 180],
  ['May', 51, 54, 54, 154],
  ['June', 112, 109, 79, 129]],
  columns=['month', 'clinic_east',
           'clinic_north', 'clinic_south',
           'clinic_west']
)

clinic_north_south = df[['clinic_north', 'clinic_south']]

print(type(clinic_north_south))



Select Rows
Let’s revisit our orders from ShoeFly.com:

id	first_name	last_name	email	shoe_type	shoe_material	shoe_color
54791	Rebecca	Lindsay	RebeccaLindsay57@hotmail.com	clogs	faux-leather	black
53450	Emily	James	EmilyJames25@gmail.com	ballet flats	faux-leather	navy
91987	Joyce	Waller	Joyce.Waller@gmail.com	sandals	fabric	black
14437	Justin	Erickson	Justin.Erickson@outlook.com	clogs	faux-leather	red
…						

Maybe our Customer Service department has just received a message from Joyce Waller, 
so we want to know exactly what she ordered. We want to select this single row of data.

DataFrames are zero-indexed, meaning that we start with the 0th row and count up from there. 
Joyce Waller’s order is the 2nd row.

We select it using the following command:

orders.iloc[2]

When we select a single row, the result is a Series (just like when we select a single column).

Code:
import codecademylib3
import pandas as pd

df = pd.DataFrame([
  ['January', 100, 100, 23, 100],
  ['February', 51, 45, 145, 45],
  ['March', 81, 96, 65, 96],
  ['April', 80, 80, 54, 180],
  ['May', 51, 54, 54, 154],
  ['June', 112, 109, 79, 129]],
  columns=['month', 'clinic_east',
           'clinic_north', 'clinic_south',
           'clinic_west'])

march = df.iloc[2]

print(march)



Selecting Multiple Rows
You can also select multiple rows from a DataFrame.

Here are a few more rows from ShoeFly.com’s orders DataFrame:

id	first_name	last_name	email	shoe_type	shoe_material	shoe_color
54791	Rebecca	Lindsay	RebeccaLindsay57@hotmail.com	clogs	faux-leather	black
53450	Emily	Joyce	EmilyJoyce25@gmail.com	ballet flats	faux-leather	navy
91987	Joyce	Waller	Joyce.Waller@gmail.com	sandals	fabric	black
14437	Justin	Erickson	Justin.Erickson@outlook.com	clogs	faux-leather	red
79357	Andrew	Banks	AB4318@gmail.com	boots	leather	brown
52386	Julie	Marsh	JulieMarsh59@gmail.com	sandals	fabric	black
20487	Thomas	Jensen	TJ5470@gmail.com	clogs	fabric	navy
76971	Janice	Hicks	Janice.Hicks@gmail.com	clogs	faux-leather	navy
21586	Gabriel	Porter	GabrielPorter24@gmail.com	clogs	leather	brown

Here are some different ways of selecting multiple rows:

orders.iloc[3:7] would select all rows starting at the 3rd row and 
up to but not including the 7th row (i.e., the 3rd row, 4th row, 5th row, and 6th row)

id	first_name	last_name	email	shoe_type	shoe_material	shoe_color
14437	Justin	Erickson	Justin.Erickson@outlook.com	clogs	faux-leather	red
79357	Andrew	Banks	AB4318@gmail.com	boots	leather	brown
52386	Julie	Marsh	JulieMarsh59@gmail.com	sandals	fabric	black
20487	Thomas	Jensen	TJ5470@gmail.com	clogs	fabric	navy

orders.iloc[:4] would select all rows up to, but not including the 4th row 
(i.e., the 0th, 1st, 2nd, and 3rd rows)

id	first_name	last_name	email	shoe_type	shoe_material	shoe_color
54791	Rebecca	Lindsay	RebeccaLindsay57@hotmail.com	clogs	faux-leather	black
53450	Emily	Joyce	EmilyJoyce25@gmail.com	ballet flats	faux-leather	navy
91987	Joyce	Waller	Joyce.Waller@gmail.com	sandals	fabric	black
14437	Justin	Erickson	Justin.Erickson@outlook.com	clogs	faux-leather	red

orders.iloc[-3:] would select the rows starting at the 3rd to last row and up to and including the final row

id	first_name	last_name	email	shoe_type	shoe_material	shoe_color
20487	Thomas	Jensen	TJ5470@gmail.com	clogs	fabric	navy
76971	Janice	Hicks	Janice.Hicks@gmail.com	clogs	faux-leather	navy
21586	Gabriel	Porter	GabrielPorter24@gmail.com	clogs	leather	brown

Code:
import codecademylib3
import pandas as pd

df = pd.DataFrame([
  ['January', 100, 100, 23, 100],
  ['February', 51, 45, 145, 45],
  ['March', 81, 96, 65, 96],
  ['April', 80, 80, 54, 180],
  ['May', 51, 54, 54, 154],
  ['June', 112, 109, 79, 129]],
  columns=['month', 'clinic_east',
           'clinic_north', 'clinic_south',
           'clinic_west']
)

april_may_june = df.iloc[3:]

print(april_may_june)



Select Rows with Logic I
You can select a subset of a DataFrame by using logical statements:

df[df.MyColumnName == desired_column_value]

We have a large DataFrame with information about our customers. A few of the many rows look like this:

name	address	phone	age
Martha Jones	123 Main St.	234-567-8910	28
Rose Tyler	456 Maple Ave.	212-867-5309	22
Donna Noble	789 Broadway	949-123-4567	35
Amy Pond	98 West End Ave.	646-555-1234	29
Clara Oswald	54 Columbus Ave.	714-225-1957	31
…	…	…	…

Suppose we want to select all rows where the customer’s age is 30. We would use:

df[df.age == 30]

In Python, == is how we test if a value is exactly equal to another value.

We can use other logical statements, such as:

Greater Than, > — Here, we select all rows where the customer’s age is greater than 30:
df[df.age > 30]

Less Than, < — Here, we select all rows where the customer’s age is less than 30:
df[df.age < 30]

Not Equal, != — This snippet selects all rows where the customer’s name is not Clara Oswald:
df[df.name != 'Clara Oswald']

Code:
import codecademylib3
import pandas as pd

df = pd.DataFrame([
  ['January', 100, 100, 23, 100],
  ['February', 51, 45, 145, 45],
  ['March', 81, 96, 65, 96],
  ['April', 80, 80, 54, 180],
  ['May', 51, 54, 54, 154],
  ['June', 112, 109, 79, 129]],
  columns=['month', 'clinic_east',
           'clinic_north', 'clinic_south',
           'clinic_west'])

january = df[df.month == 'January']

print(january)



Select Rows with Logic II
You can also combine multiple logical statements, as long as each statement is in parentheses.

For instance, suppose we wanted to select all rows where the customer’s age 
was under 30 or the customer’s name was “Martha Jones”:

name	address	phone	age
Martha Jones	123 Main St.	234-567-8910	28
Rose Tyler	456 Maple Ave.	212-867-5309	22
Donna Noble	789 Broadway	949-123-4567	35
Amy Pond	98 West End Ave.	646-555-1234	29
Clara Oswald	54 Columbus Ave.	714-225-1957	31
…			

We could use the following code:

df[(df.age < 30) |
   (df.name == 'Martha Jones')]

In Python, | means “or” and & means “and”.

Code:
import codecademylib3
import pandas as pd

df = pd.DataFrame([
  ['January', 100, 100, 23, 100],
  ['February', 51, 45, 145, 45],
  ['March', 81, 96, 65, 96],
  ['April', 80, 80, 54, 180],
  ['May', 51, 54, 54, 154],
  ['June', 112, 109, 79, 129]],
  columns=['month', 'clinic_east',
           'clinic_north', 'clinic_south',
           'clinic_west'])

march_april = df[(df.month == 'March') | (df.month == 'April')]

print(march_april)



Select Rows with Logic III
Suppose we want to select the rows where the customer’s name is either “Martha Jones”, 
“Rose Tyler” or “Amy Pond”.

name	address	phone	age
Martha Jones	123 Main St.	234-567-8910	28
Rose Tyler	456 Maple Ave.	212-867-5309	22
Donna Noble	789 Broadway	949-123-4567	35
Amy Pond	98 West End Ave.	646-555-1234	29
Clara Oswald	54 Columbus Ave.	714-225-1957	31
…	…	…	…

We could use the isin command to check that df.name is one of a list of values:

Code:
import codecademylib3
import pandas as pd

df = pd.DataFrame([
  ['January', 100, 100, 23, 100],
  ['February', 51, 45, 145, 45],
  ['March', 81, 96, 65, 96],
  ['April', 80, 80, 54, 180],
  ['May', 51, 54, 54, 154],
  ['June', 112, 109, 79, 129]],
  columns=['month', 'clinic_east',
           'clinic_north', 'clinic_south',
           'clinic_west'])

january_february_march = df[df.month.isin(['January', 'February', 'March'])]           

print(january_february_march)



Setting indices
When we select a subset of a DataFrame using logic, we end up with non-consecutive indices. 
This is inelegant and makes it hard to use .iloc().

We can fix this using the method .reset_index(). 
For example, here is a DataFrame called df with non-consecutive indices:

First Name	Last Name
0	John	Smith
4	Jane	Doe
7	Joe	Schmo

If we use the command df.reset_index(), we get a new DataFrame with a new set of indices:

index	First Name	Last Name
0	0	John	Smith
1	4	Jane	Doe
2	7	Joe	Schmo

Note that the old indices have been moved into a new column called 'index'. 
Unless you need those values for something special, it’s probably better to use the keyword drop=True 
so that you don’t end up with that extra column. If we run the command df.reset_index(drop=True), 
we get a new DataFrame that looks like this:

First Name	Last Name
0	John	Smith
1	Jane	Doe
2	Joe	Schmo

Using .reset_index() will return a new DataFrame, but we usually just want to modify our existing DataFrame. 
If we use the keyword inplace=True we can just modify our existing DataFrame.

Instructions
Checkpoint 1 Enabled
1.
Examine the code in the workspace. Note that df2 is a subset of rows from df.

Type the following and press “Run”:

print(df2)

Code:
import codecademylib3
import pandas as pd

df = pd.DataFrame([
  ['January', 100, 100, 23, 100],
  ['February', 51, 45, 145, 45],
  ['March', 81, 96, 65, 96],
  ['April', 80, 80, 54, 180],
  ['May', 51, 54, 54, 154],
  ['June', 112, 109, 79, 129]],
  columns=['month', 'clinic_east',
           'clinic_north', 'clinic_south',
           'clinic_west']
)

df2 = df.loc[[1, 3, 5]]

# print(df2)

df3 = df2.reset_index()

print(df3)

df2.reset_index(inplace = True, drop = True)

print(df2)



Review
You’ve completed the lesson! 
You’ve just learned the basics of working with a single table in Pandas, including:

Create a table from scratch
Loading data from another file
Selecting certain rows or columns of a table
Let’s practice what you’ve learned.

Instructions

1. In this example, you’ll be the data analyst for ShoeFly.com, a fictional online shoe store. 
You’ve seen this data; now it’s your turn to work with it!

Load the data from shoefly.csv into the variable orders.


2. Inspect the first 5 lines of the data.


3. Your marketing department wants to send out an email blast to everyone who ordered shoes!
Select all of the email addresses from the column email and save them to a variable called emails.


4. Frances Palmer claims that her order was wrong. What did Frances Palmer order?
Use logic to select that row of orders and save it to the variable frances_palmer.


5. We need some customer reviews for our comfortable shoes. 
Select all orders for shoe_type: clogs, boots, and ballet flats and save them to the variable comfy_shoes.

Code: 
import codecademylib3
import pandas as pd

orders = pd.read_csv('shoefly.csv')

print(orders.head())

emails = orders.email

frances_palmer = orders[(orders.first_name == 'Frances') & (orders.last_name == 'Palmer')]

comfy_shoes = orders[orders.shoe_type.isin(['clogs','boots', 'ballet flats'])]

print(comfy_shoes.reset_index(drop = True)
