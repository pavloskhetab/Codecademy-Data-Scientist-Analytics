CREATING, LOADING, AND SELECTING DATA WITH PANDAS

Importing the Pandas Module
Pandas is a Python module for working with tabular data (i.e., data in a table with rows and columns). 
Tabular data has a lot of the same functionality as SQL or Excel, but Pandas adds the power of Python.

In order to get access to the Pandas module, we’ll need to install the module and 
then import it into a Python file. 
To learn how to install Python for data analysis on your personal computer, 
please refer to the following Codecademy resources:

Introducing Jupyter Notebook
Setting Up Jupyter Notebook
Getting Started with Jupyter Notebook
Otherwise, let’s move on! The pandas module is usually imported at the top of a Python file under the alias pd.

import pandas as pd

If we need to access the pandas module, we can do so by operating on pd.

In this lesson, you’ll learn the basics of working with a single table in Pandas, such as:

Create a table from scratch
Loading data from another file
Selecting certain rows or columns of a table
Note: In order for Codecademy to properly display data from Pandas, we need to import another special library:

import codecademylib3

When you’re on Codecademy.com, we’ll always provide this import for you at the top of script.py.

When you’re not on Codecademy.com, you won’t need it.

Code:
What can we do with Pandas?
In this example, we'll be working with data from ShoeFly.com, a fictional online shoe store.

# Before we analyze anything, we need to import pandas
import pandas as pd
We can load data into Pandas from a csv (comma-separated variable) file. This data represents purchases from ShoeFly.com.

df = pd.read_csv('shoefly_orders.csv')
Let's examine the first 10 rows of our data!

df.head(10)
id	first_name	last_name	email	shoe_type	shoe_material	shoe_color
0	54791	Rebecca	Lindsay	RebeccaLindsay57@hotmail.com	clogs	faux-leather	black
1	53450	Emily	Joyce	EmilyJoyce25@gmail.com	ballet flats	faux-leather	navy
2	91987	Joyce	Waller	Joyce.Waller@gmail.com	sandals	fabric	black
3	14437	Justin	Erickson	Justin.Erickson@outlook.com	clogs	faux-leather	red
4	79357	Andrew	Banks	AB4318@gmail.com	boots	leather	brown
5	52386	Julie	Marsh	JulieMarsh59@gmail.com	sandals	fabric	black
6	20487	Thomas	Jensen	TJ5470@gmail.com	clogs	fabric	navy
7	76971	Janice	Hicks	Janice.Hicks@gmail.com	clogs	faux-leather	navy
8	21586	Gabriel	Porter	GabrielPorter24@gmail.com	clogs	leather	brown
9	62083	Frances	Palmer	FrancesPalmer50@gmail.com	wedges	leather	white
Let's select everyone who ordered black sandals.

df[(df.shoe_type == 'sandals') & (df.shoe_color == 'black')]
id	first_name	last_name	email	shoe_type	shoe_material	shoe_color
2	91987	Joyce	Waller	Joyce.Waller@gmail.com	sandals	fabric	black
5	52386	Julie	Marsh	JulieMarsh59@gmail.com	sandals	fabric	black
Let's see what Susan Dennis ordered.

df[(df.first_name == 'Susan') & (df.last_name == 'Dennis')]
id	first_name	last_name	email	shoe_type	shoe_material	shoe_color
12	45832	Susan	Dennis	SusanDennis58@gmail.com	ballet flats	fabric	white
It looks like Susan ordered white fabric ballet flats!



Create a DataFrame I
A DataFrame is an object that stores data as rows and columns. 
You can think of a DataFrame as a spreadsheet or as a SQL table. 
You can manually create a DataFrame or fill it with data from a CSV, an Excel spreadsheet, or a SQL query.

DataFrames have rows and columns. Each column has a name, which is a string. 
Each row has an index, which is an integer. 
DataFrames can contain many different data types: strings, ints, floats, tuples, etc.

You can pass in a dictionary to pd.DataFrame(). 
Each key is a column name and each value is a list of column values. 
The columns must all be the same length or you will get an error. 

Here’s an example:

df1 = pd.DataFrame({
    'name': ['John Smith', 'Jane Doe', 'Joe Schmo'],
    'address': ['123 Main St.', '456 Maple Ave.', '789 Broadway'],
    'age': [34, 28, 51]
})

This command creates a DataFrame called df1 that looks like this:

name	address	age
John Smith	123 Main St.	34
Jane Doe	456 Maple Ave.	28
Joe Schmo	789 Broadway	  51

Code:
import codecademylib3
import pandas as pd

df1 = pd.DataFrame({
  'Product ID': [1, 2, 3, 4],
  # add Product Name and Color here
  'Product Name': ['t-shirt', 't-shirt', 'skirt', 'skirt'],
  'Colour': ['blue', 'green', 'red', 'black']
})

print(df1)

	Product ID	Product Name	Colour
0	   1	      t-shirt	      blue
1	   2	      t-shirt	      green
2	   3	      skirt	        red
3	   4  	    skirt	        black



Create a DataFrame II
You can also add data using lists.

For example, you can pass in a list of lists, where each one represents a row of data. 
Use the keyword argument columns to pass a list of column names.

df2 = pd.DataFrame([
    ['John Smith', '123 Main St.', 34],
    ['Jane Doe', '456 Maple Ave.', 28],
    ['Joe Schmo', '789 Broadway', 51]
    ],
    columns=['name', 'address', 'age'])

This command produces a DataFrame df2 that looks like this:

name	address	age
John Smith	123 Main St.	34
Jane Doe	456 Maple Ave.	28
Joe Schmo	789 Broadway	51

In this example, we were able to control the ordering of the columns because we used lists.

Code:
import codecademylib3
import pandas as pd

df2 = pd.DataFrame([
  [1, 'San Diego', 100],
  [2, 'Los Angeles', 120],
  # Fill in rows 3 and 4
  [3, 'San Francisco', 90],
  [4, 'Sacramento', 115]
],
  columns=[
    #add column names here
    'Store ID', 'Location', 'Number of Employees'
  ])

print(df2)

	Store ID	Location	Number of Employees
0	   1	    San Diego	      100
1	   2	    Los Angeles	    120
2	   3	    San Francisco	  90
3	   4	    Sacramento	    115



Comma Separated Variables (CSV)
We now know how to create our own DataFrame. However, most of the time, we’ll be working with datasets that already exist. One of the most common formats for big datasets is the CSV.

CSV (comma separated values) is a text-only spreadsheet format. You can find CSVs in lots of places:

Online datasets (here’s an example from data.gov)
Export from Excel or Google Sheets
Export from SQL
The first row of a CSV contains column headings. All subsequent rows contain values. Each column heading and each variable is separated by a comma:

column1,column2,column3
value1,value2,value3

That example CSV represents the following table:

column1	column2	column3
value1	value2	value3

Code:
cupcakes.csv

name,cake_flavor,frosting_flavor,topping
Chocolate Cake,chocolate,chocolate,chocolate shavings
Birthday Cake,vanilla,vanilla,rainbow sprinkles
Carrot Cake,carrot,cream cheese,almonds



Loading and Saving CSVs
When you have data in a CSV, you can load it into a DataFrame in Pandas using .read_csv():

pd.read_csv('my-csv-file.csv')

In the example above, the .read_csv() method is called. 
The CSV file called my-csv-file is passed in as an argument.

We can also save data to a CSV, using .to_csv().

df.to_csv('new-csv-file.csv')

In the example above, the .to_csv() method is called on df (which represents a DataFrame object). 
The name of the CSV file is passed in as an argument (new-csv-file.csv). 
By default, this method will save the CSV file in your current directory.

Code:

import codecademylib3
import pandas as pd

df = pd.read_csv('sample.csv')

print(df)



Inspect a DataFrame
When we load a new DataFrame from a CSV, we want to know what it looks like.

If it’s a small DataFrame, you can display it by typing print(df).

If it’s a larger DataFrame, it’s helpful to be able to inspect a few items 
without having to look at the entire DataFrame.

The method .head() gives the first 5 rows of a DataFrame. 
If you want to see more rows, you can pass in the positional argument n. 
For example, df.head(10) would show the first 10 rows.

The method df.info() gives some statistics for each column.

Code:
import codecademylib3
import pandas as pd
#load the CSV below:

df = pd.read_csv('imdb.csv')

print(df.head())

print(df.info())



Select Columns
Now we know how to create and load data. 
Let’s select parts of those datasets that are interesting or important to our analyses.

Suppose you have the DataFrame called customers, which contains the ages of your customers:

name	age
Rebecca Erikson	35
Thomas Roberson	28
Diane Ochoa	42
…	…

Perhaps you want to take the average or plot a histogram of the ages. 
In order to do either of these tasks, you’d need to select the column.

There are two possible syntaxes for selecting all values from a column:

Select the column as if you were selecting a value from a dictionary using a key. 
In our example, we would type customers['age'] to select the ages.
If the name of a column follows all of the rules for a variable name 
(doesn’t start with a number, doesn’t contain spaces or special characters, etc.), 
then you can select it using the following notation: df.MySecondColumn. 
In our example, we would type customers.age.

When we select a single column, the result is called a Series.

Code:
import codecademylib3
import pandas as pd

df = pd.DataFrame([
  ['January', 100, 100, 23, 100],
  ['February', 51, 45, 145, 45],
  ['March', 81, 96, 65, 96],
  ['April', 80, 80, 54, 180],
  ['May', 51, 54, 54, 154],
  ['June', 112, 109, 79, 129]],
  columns=['month', 'clinic_east',
           'clinic_north', 'clinic_south',
           'clinic_west']
)
clinic_north = df.clinic_north

print(type(clinic_north))



