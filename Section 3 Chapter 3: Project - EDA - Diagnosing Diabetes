EDA: Diagnosing Diabetes
In this project, you’ll imagine you are a data scientist interested in exploring data that looks at 
how certain diagnostic factors affect the diabetes outcome of women patients.

You will use your EDA skills to help inspect, clean, and validate the data.

Note: This dataset is from the National Institute of Diabetes and Digestive and Kidney Diseases. It contains the following columns:

Pregnancies: Number of times pregnant
Glucose: Plasma glucose concentration at 2 hours in an oral glucose tolerance test
BloodPressure: Diastolic blood pressure
SkinThickness: Triceps skinfold thickness
Insulin: 2-Hour serum insulin
BMI: Body mass index
DiabetesPedigreeFunction: Diabetes pedigree function
Age: Age (years)
Outcome: Class variable (0 or 1)
Let’s get started!

Setup Instructions
You have two options of completing this assignment. Either here, within Codecademy’s output terminal, or on your own, 
in case you’re more comfortable using a Jupyter notebook.If you choose to do this project on your computer instead of Codecademy, 
you can download what you’ll need by clicking the “Download” button below. If you need help setting up your computer, be sure to check out our setup guides:


1. **Initial Inspection:**
   - Familiarize yourself with the dataset here.
   - Look at each of the nine columns in the documentation.
   - What do you expect each data type to be?

2. **Loading Data:**
   - Load the diabetes data to start exploring.
   - Load the data in a variable called diabetes_data and print the first few rows.
   - Note: The data is stored in a file called diabetes.csv.

3. **Number of Columns:**
   - How many columns (features) does the data contain?

4. **Number of Rows:**
   - How many rows (observations) does the data contain?

5. **Further Inspection:**
   - Inspect diabetes_data further.
   - Do any of the columns in the data contain null (missing) values?

6. **Assumptions and Summary Statistics:**
   - If you answered no to the question above, not so fast!
   - Calculate summary statistics on diabetes_data using the .describe() method.

7. **Oddities in Summary Statistics:**
   - Looking at the summary statistics, do you notice anything odd about the following columns?
     - Glucose
     - BloodPressure
     - SkinThickness
     - Insulin
     - BMI

8. **Identifying Outliers:**
   - Do you spot any other outliers in the data?

9. **Replacing 0 with NaN:**
   - Let’s see if we can get a more accurate view of the missing values in the data.
   - Use the following code to replace the instances of 0 with NaN in the five columns mentioned:
     ```
     diabetes_data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = diabetes_data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.nan)
     ```

10. **Checking Missing Values Again:**
    - Next, check for missing (null) values in all of the columns just like you did in Step 5.
    - Now how many missing values are there?

11. **Printing Rows with Missing Values:**
    - Let’s take a closer look at these rows to get a better idea of why some data might be missing.
    - Print out all of the rows that contain missing (null) values.

12. **Patterns in Missing Data:**
    - Go through the rows with missing data. Do you notice any patterns or overlaps between the missing data?

13. **Data Types Inspection:**
    - Next, take a closer look at the data types of each column in diabetes_data.
    - Does the result match what you would expect?

14. **Outcome Column Data Type:**
    - To figure out why the Outcome column is of type object (string) instead of type int64, print out the unique values in the Outcome column.

15. **Resolving Outcome Column Issue:**
    - How might you resolve this issue?

16. **Next Steps:**
    - Congratulations! In this project, you saw how EDA can help with the initial data inspection and cleaning process. This is an important step as it helps to keep your datasets clean and reliable.
    - Here are some ways you might extend this project if you’d like:
      - Use .value_counts() to more fully explore the values in each column.
      - Investigate other outliers in the data that may be easily overlooked.
      - Instead of changing the 0 values in the five columns to NaN, try replacing the values with the median or mean of each column.

Code:
import codecademylib3
import pandas as pd
import numpy as np

# code goes here
# 1. What do you expect each data type to be for the columns?
'''
Pregnancies
Number of times pregnant 
Expected Data type: int64

Glucose
Plasma glucose concentration a 2 hours in an oral glucose tolerance test
Expected Data type: float64
Actual Data type: int64

BloodPressure
Diastolic blood pressure (mm Hg)
Expected Data type: float64
Actual Data type: int64

SkinThickness
Triceps skin fold thickness (mm)
Expected Data type: float64
Actual Data type: int64

Insulin
2-Hour serum insulin (mu U/ml)
Expected Data type: float64
Actual Data type: int64

BMI
Body mass index (weight in kg/(height in m)^2)
Expected Data type: float64

DiabetesPedigreeFunction
Diabetes pedigree function
Expected Data type: ?
Actual Data type: float64

Age
Age (years)
Expected Data type: int64

Outcome
Class variable (0 or 1) 268 of 768 are 1, the others are 0
Expected Data type: bool
'''

# 2. Load data in variable 'diabetes_data' and print first few rows.
diabetes_data = pd.read_csv('diabetes.csv')

print(diabetes_data.head())

# 3. How many columns(features) does the data contain?
print(len(diabetes_data.columns))

# 4. How many rows(observations) does the data contain?
print(len(diabetes_data))

# 5. Do any of the columns in the data contain null(missing) values?
print(diabetes_data.isnull().sum())

# 6. While the .isnull().sum() indicates none of the columns have null values, it does not mean that the data isn't missing any values. To investigate further, calculate summary statistics on diabetes_data using the .describe() method.
print(diabetes_data.describe())
