Hurricane Analysis
Overview
This project is slightly different than others you have encountered thus far on Codecademy. Instead of a step-by-step tutorial, this project contains a series of open-ended requirements which describe the project you’ll be building. There are many possible ways to correctly fulfill all of these requirements, and you should expect to use the internet, Codecademy, and other resources when you encounter a problem that you cannot easily solve.

In order to complete this project, you should have completed the Loops and Dictionaries sections of the Learn Python 3 Course. This content is also covered in the Data Scientist Career Path.

Project Goals
You will work to write several functions that organize and manipulate data about Category 5 Hurricanes, the strongest hurricanes as rated by their wind speed. Each one of these functions will use a number of parameters, conditionals, lists, dictionaries, string manipulation, and return statements.

Setup Instructions
You have two options of completing this assignment. Either here, within Codecademy’s output terminal, or on your own, in case you’re more comfortable using a Jupyter notebook.If you choose to do this project on your computer instead of Codecademy, you can download what you’ll need by clicking the “Download” button below. If you need help setting up your computer, be sure to check out our setup guides:

Command Line Interface Setup
Introducing Jupyter Notebook
Setting up Jupyter Notebook
Getting Started with Jupyter
Getting More out of Jupyter Notebook
Open Hurricane Analysis.ipynb and follow the steps in the Jupyter Notebook. If you get stuck, you can look at Hurricane Analysis_Solution.ipynb for the answer.

Code:
# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]


# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}

# test function by updating damages

updated_damages = []

def update_damage_values(list_of_damages):
    for value in list_of_damages:
        if 'M' in value:
            number_m = value.replace('M','')
            
            updated_m = float(number_m) * conversion['M']
            
            updated_damages.append(updated_m)
            
        elif 'B' in value:
            number_b = value.replace('B','')
            
            updated_b = float(number_b) * conversion['B']
            
            updated_damages.append(updated_b)
        else:
            updated_damages.append(value)
            
update_damage_values(damages)

print(updated_damages)


# 2 
# Create a Table

# Create and view the hurricanes dictionary
def create_hurricanes_dictionary(names, months, years, max_sustained_winds, areas_affected, damages, deaths):

  hurricanes = {}
  num_hurricanes = len(names)

  for i in range(num_hurricanes):
    hurricanes[names[i]] = {
                          "Name": names[i],
                          "Month": months[i],
                          "Year": years[i],
                          "Max Sustained Wind": max_sustained_winds[i],
                          "Areas Affected": areas_affected[i],
                          "Damage": damages[i],
                          "Deaths": deaths[i]
                          }
  return hurricanes

hurricanes = create_hurricanes_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)

#print(hurricanes['Cuba I'])


# 3
# Organizing by Year
# create a new dictionary of hurricanes with year and key

#1st solution using a for loop
"""def create_years_dictionary(names, months, years, max_sustained_winds, areas_affected, damages, deaths):
    hurricanes_by_year = {}

    for name, month, year, max_wind, area_affected, damage, death in zip(names, months, years, max_sustained_winds, areas_affected, damages, deaths):
        current_cane = {
            "Name": name,
            "Month": month,
            "Year": year,
            "Max Sustained Wind": max_wind,
            "Areas Affected": area_affected,
            "Damage": damage,
            "Deaths": death
        }

        if year in hurricanes_by_year:
            hurricanes_by_year[year].append(current_cane)
        else:
            hurricanes_by_year[year] = [current_cane]

    return hurricanes_by_year

"""

#2nd solution using a dictionary comprehension
def create_years_dictionary(names, months, years, max_sustained_winds, areas_affected, damages, deaths):
    hurricanes_by_year = {
        year: [] for year in years
    }

    for name, month, year, max_wind, area_affected, damage, death in zip(names, months, years, max_sustained_winds, areas_affected, damages, deaths):
        current_cane = {
            "Name": name,
            "Month": month,
            "Year": year,
            "Max Sustained Wind": max_wind,
            "Areas Affected": area_affected,
            "Damage": damage,
            "Deaths": death
        }
        hurricanes_by_year[year].append(current_cane)

    return hurricanes_by_year


hurricanes_by_year = create_years_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)

key_to_check = 1973
if key_to_check in hurricanes_by_year:
  print(hurricanes_by_year[key_to_check])
else:
  print("We do not have data for hurricanes in the year " + str(key_to_check) + ".")


# 4
# Counting Damaged Areas
# create dictionary of areas to store the number of hurricanes involved in the affected areas

def count_areas(areas_affected):

    count_areas = {}
    
    for area in areas_affected:
      for place in area:
        if place in count_areas:
            count_areas[place] += 1
        else:
            count_areas[place] = 1
    return count_areas

area_count = count_areas(areas_affected)
country = 'Florida'
print(country + ": " + str(area_count[country]))


# 5 
# Calculating Maximum Hurricane Count

# find most frequently affected area and the number of hurricanes involved in

def max_hurricane_count_by_area(areas_affected):
    area_count = {}

    for areas in areas_affected:
        for area in areas:
            if area in area_count:
                area_count[area] += 1
            else:
                area_count[area] = 1

    most_affected_area = max(area_count, key=area_count.get)
    most_affected_count = area_count[most_affected_area]

    return most_affected_area, most_affected_count

most_affected_area = max_hurricane_count_by_area(areas_affected)

#print(area_count)

print(most_affected_area)


# 6
# Calculating the Deadliest Hurricane

# find highest mortality hurricane and the number of deaths

def find_max_deaths_hurricane(hurricanes):
    max_deaths_hurricane = max(hurricanes.values(), key=lambda x: x["Deaths"])
    return max_deaths_hurricane["Name"], max_deaths_hurricane["Deaths"]

# Call the function with the hurricanes dictionary
max_deaths_hurricane, max_deaths_count = find_max_deaths_hurricane(hurricanes)

print("Hurricane with the maximum deaths:", max_deaths_hurricane)
print("Maximum deaths:", max_deaths_count)


# 7
# Rating Hurricanes by Mortality


# categorize hurricanes in new dictionary with mortality severity as key


# 8 Calculating Hurricane Maximum Damage

# find highest damage inducing hurricane and its total cost


# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key

