A/B Testing for ShoeFly.com

Our favorite online shoe store, ShoeFly.com is performing an A/B Test. 
They have two different versions of an ad, which they have placed in emails, as well as in banner ads on Facebook, Twitter, and Google. 
They want to know how the two ads are performing on each of the different platforms on each day of the week. 
Help them analyze the data using aggregate measures.


Analyzing Ad Sources
1. Examine the first few rows of ad_clicks.

2. Your manager wants to know which ad platform is getting you the most views.

How many views (i.e., rows of the table) came from each utm_source?


3. If the column ad_click_timestamp is not null, then someone actually clicked on the ad that was displayed.

Create a new column called is_click, which is True if ad_click_timestamp is not null and False otherwise.


4. We want to know the percent of people who clicked on ads from each utm_source.

Start by grouping by utm_source and is_click and counting the number of user_id‘s in each of those groups. Save your answer to the variable clicks_by_source.


5. Now let’s pivot the data so that the columns are is_click (either True or False), the index is utm_source, and the values are user_id.

Save your results to the variable clicks_pivot.


6. Create a new column in clicks_pivot called percent_clicked which is equal to the percent of users who clicked on the ad from each utm_source.

Was there a difference in click rates for each source?


Analyzing an A/B Test
7. The column experimental_group tells us whether the user was shown Ad A or Ad B.

Were approximately the same number of people shown both ads?


8. Using the column is_click that we defined earlier, check to see if a greater percentage of users clicked on Ad A or Ad B.


9. The Product Manager for the A/B test thinks that the clicks might have changed by day of the week.

Start by creating two DataFrames: a_clicks and b_clicks, which contain only the results for A group and B group, respectively.


10. For each group (a_clicks and b_clicks), calculate the percent of users who clicked on the ad by day.


11. Compare the results for A and B. What happened over the course of the week?

Do you recommend that your company use Ad A or Ad B?


Code:
import codecademylib3
import pandas as pd

ad_clicks = pd.read_csv('ad_clicks.csv')

# Task 1)
print(ad_clicks.head())

# Task 2)
utm_source_views = ad_clicks.groupby('utm_source').user_id.count().reset_index()

print(utm_source_views)

# Task 3)
ad_clicks['is_click'] = ad_clicks['ad_click_timestamp'].notnull()

print(ad_clicks)

# Task 4)
clicks_by_source = ad_clicks.groupby(['utm_source', 'is_click']).user_id.count().reset_index()

print(clicks_by_source)

# Task 5)
clicks_pivot = clicks_by_source.pivot(columns = 'is_click', index = 'utm_source', values = 'user_id')

print(clicks_pivot)

# Task 6)
clicks_pivot['percent_clicked'] = (clicks_pivot[True] / (clicks_pivot[True] + clicks_pivot[False])) * 100

print(clicks_pivot)

# Task 7)
experimental_groups_grouped = ad_clicks.groupby('experimental_group').user_id.count().reset_index()

print(experimental_groups_grouped)

# Task 8)
experimental_groups_is_click_grouped = ad_clicks.groupby(['experimental_group', 'is_click']).user_id.count().reset_index()

print(experimental_groups_is_click_grouped)

experimental_groups_is_click_grouped_pivot = experimental_groups_is_click_grouped.pivot(columns = 'is_click', index = 'experimental_group', values = 'user_id')

print(experimental_groups_is_click_grouped_pivot)

experimental_groups_is_click_grouped_pivot['percent_clicked'] = (experimental_groups_is_click_grouped_pivot[True] / (experimental_groups_is_click_grouped_pivot[True] + experimental_groups_is_click_grouped_pivot[False])) * 100

print(experimental_groups_is_click_grouped_pivot)

# Task 9)
a_clicks = ad_clicks[ad_clicks['experimental_group'] == 'A']

print(a_clicks)

b_clicks = ad_clicks[ad_clicks['experimental_group'] == 'B']

print(b_clicks)

# Task 10)
# Calculate the total number of users and users who clicked for each day in group A
a_clicks_by_day = a_clicks.groupby('day').agg(total_users=('user_id', 'count'), clicks=('is_click', 'sum')).reset_index()

b_clicks_by_day = b_clicks.groupby('day').agg(total_users=('user_id', 'count'), clicks=('is_click', 'sum')).reset_index()


# Calculate the percentage of users who clicked for each day in group A
a_clicks_by_day['percent_clicked'] = (a_clicks_by_day['clicks'] / a_clicks_by_day['total_users']) * 100

b_clicks_by_day['percent_clicked'] = (b_clicks_by_day['clicks'] / b_clicks_by_day['total_users']) * 100

print(a_clicks_by_day)
print(b_clicks_by_day)

# Task 11)
# I recommend using Ad A as there's more % of ads clicked.
