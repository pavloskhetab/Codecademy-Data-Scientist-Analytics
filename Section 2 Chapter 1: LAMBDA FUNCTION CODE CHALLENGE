LAMBDA FUNCTION CODE CHALLENGE
Contains A
Welcome! Let’s dive into lambda functions by exploring the in keyword!

This lesson will help you review lambda functions by providing some challenge exercises. If you need a refresher on the syntax of lambda functions, review this article on lambda functions.

In Python, you can check if a string contains a substring by using the keyword in. For example, the line:

return "I" in "Team"

would return False, as there is no "I" in "Team". However:

return "I" in "I love Python"

returns True, because there is an "I" in "I love Python".

Remember that to make a lambda function you can use the syntax:

lambda my_input: <my_input modified somehow>

For example, a lambda that would return my_input plus 1 would look like:

plus_one = lambda my_input: my_input+1

Code: 
#Write your lambda function here
contains_a = lambda word: 'a' in word

print(contains_a("banana"))
print(contains_a("apple"))
print(contains_a("cherry"))



Long String
To find the number of characters in a string, we use len. This block of code:

print(len("Hello"))
print(len("world!"))
print(len("Hello, world!"))

would print out:

5
6
13

Code:
#Write your lambda function here
long_string = lambda str: len(str) > 12

print(long_string("short"))
print(long_string("photosynthesis"))



Ends With A
You can get a character of a string string_name by using the syntax string_name[index], where index is the place of character you want to get, starting at 0. The last character in the string is string_name[-1].

For example:

my_string = "Whoa! A seesaw"
print(my_string[0])
print(my_string[2])
print(my_string[-1])

would print

"W"
"o"
"w"

Code:
#Write your lambda function here
ends_in_a = lambda str: str[-1] == 'a'

print(ends_in_a("data"))
print(ends_in_a("aardvark"))



Double Or Zero
Python makes math easy. To multiply, you can use *:

>>> 4*2
8
>>> 2*3
6
>>> 0*10
0
>>> 20*10
200

As a reminder, to return different output depending on different input, we can use if and else inside our lambda function:

add_or_subtract = lambda input_number: input_number - 1 if input_number >= 0 else input_number + 1

The function add_or_subtract will return your input minus 1 if your input is positive or 0, and otherwise will return your input plus 1.

Here are some examples of how it would work:

>>> add_or_subtract(0)
-1
>>> add_or_subtract(8)
7
>>> add_or_subtract(-4)
-3

Code:
#Write your lambda function here
double_or_zero = lambda num: num*2 if num > 10 else 0

print(double_or_zero(15))
print(double_or_zero(5))



Even/Odd
In Python, %, or the modulo operator, returns the remainder after division.

>>> 4%2 #This divides evenly
0
>>> 7%3 #7/3 has a remainder of 1
1
>>> 27%10
7
>>> 30%10
0

You can use % 2 to determine if a number is even or odd. If it is even, there should be no remainder (an output of 0). If it is odd, there should be a remainder of 1:

>>> 4%2 
0
>>> 7%2
1
>>> 9%2
1
>>> 0%2
0

Code:
#Write your lambda function here
even_or_odd = lambda num: "even" if num % 2 == 0 else "odd"

print(even_or_odd(10))
print(even_or_odd(5))



Multiple of Three
In general, using %n will tell you if an integer is a multiple of n. If the result is 0, the integer is a multiple of n (since there is no remainder in the division):

>>> 4%4 #4 is a multiple of 4
0
>>> 12%5 #12 is not a multiple of 5
2 
>>> 9%2 #9 is not a multiple of 2
1
>>> 100%10 #100 is a multiple of 10
0

Code:
#Write your lambda function here
multiple_of_three = lambda num: "multiple of three" if num % 3 == 0 else "not a multiple"
print(multiple_of_three(9))
print(multiple_of_three(10))



Movie Rating
Comparisons can be done using:

<: less than
<=: less than or equal to
>: greater than
>=: greater than or equal to
==: equal to
!=: not equal to
These statements return either True or False:

>>> 4 < 4
False
>>> 4 <= 4
True 
>>> 9 > 2 
True
>>> 9 >= 2
True
>>> 1 > 2 
False

Code:
#Write your lambda function here
rate_movie = lambda rating: "I liked this movie" if rating > 8.5 else "This movie was not very good"

print(rate_movie(9.2))
print(rate_movie(7.2))



You can use the modulo operator (%) with 10 to find the ones’ place of an integer.

Here are some examples:

>>> 41%10
1
>>> 2%10
2 
>>> 39%10
9
>>> 103%10
3
>>> 20%10
0

Code:
#Write your lambda function here
ones_place = lambda num: num % 10

print(ones_place(123))
print(ones_place(4))



Double Square
You can find the square of a number by multiplying it by itself:

eight_squared = 8*8
#The value of eight_squared is now 64

or by using the exponential operator **:

seven_squared = 7**2
#The value of seven_squared is now 49

Code:
#Write your lambda function here
double_square = lambda num: 2 * (num * num
)
print(double_square(5))
print(double_square(3))



Add Random
random.randint(a,b) will return an integer between a and b (inclusive).

So, random.randint(5, 8) could return any integer between 5 and 8 including both 5 and 8.

random.randint(0, 100) could return any integer between 0 and 100 including both 0 and 100.

Code:
import random
#Write your lambda function here
add_random = lambda num: num + random.randint(1,10)
print(add_random(5))
print(add_random(100))



Conclusion
You practiced basic lambda function syntax like:

add_two = lambda my_input: my_input+2

as well as more complicated lambda functions with if/else statements like:

check_if_A_grade = lambda grade: 'Got an A!' if grade >= 90 else 'Did not get an A...'

Also, along the way you practiced these core Python concepts:

Strings and substrings
Getting characters from strings
Mathematical operations
Comparators
Random integers
Good job!
