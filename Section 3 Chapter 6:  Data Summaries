Data Summaries

Central Tendency for Quantitative Data
For quantitative variables, we often want to describe the central tendency, or 
the “typical” value of a variable. For example, what is the typical cost of rent in New York City?

There are several common measures of central tendency:

Mean: The average value of the variable, calculated as the sum of all values divided by the number of values.
Median: The middle value of the variable when sorted.
Mode: The most frequent value of the variable.
Trimmed mean: The mean excluding x percent of the lowest and highest data points.
For our rentals DataFrame with a column named rent that contains rental prices, 
we can calculate the central tendency statistics listed above as follows:

# Mean
rentals.rent.mean()

# Median
rentals.rent.median()

# Mode
rentals.rent.mode()

# Trimmed mean
from scipy.stats import trim_mean
trim_mean(rentals.rent, proportiontocut=0.1)  # trim extreme 10%

Code:
import pandas as pd

movies = pd.read_csv('movies.csv')

# Save the mean to mean_budget
mean_budget = movies.production_budget.mean()

print(mean_budget)

# Save the median to med_budget
med_budget = movies.production_budget.median()

print(med_budget)

# Save the mode to mode_budget
mode_budget = movies.production_budget.mode()

print(mode_budget)

# Save the trimmed mean to trmean_budget
from scipy.stats import trim_mean
trmean_budget = trim_mean(movies.production_budget, proportiontocut = 0.2)

print(trmean_budget)



Spread for Quantitative Data
The spread of a quantitative variable describes the amount of variability. This is important because it provides context for measures of central tendency. For example, if there is a lot of variability in New York City rent prices, we can be less certain that the mean or median price is representative of what the typical rent is.

There are several common measures of spread:

Range: The difference between the maximum and minimum values of a variable.
Interquartile range (IQR): The difference between the 75th and 25th percentile values.
Variance: The average of the squared distance from each data point to the mean.
Standard deviation (SD): The square root of the variance.
Mean absolute deviation (MAD): The mean absolute value of the distance between each data point and the mean.
For our rentals DataFrame, we can calculate the spread for the rent column as follows:

# Range
rentals.rent.max() - rentals.rent.min()

# Interquartile range
rentals.rent.quantile(0.75) - rentals.rent.quantile(0.25)

from scipy.stats import iqr
iqr(rentals.rent)  # alternative way

# Variance
rentals.rent.var()

# Standard deviation
rentals.rent.std()

# Mean absolute deviation
rentals.rent.mad()

Code:
import pandas as pd

movies = pd.read_csv('movies.csv')

# Save the range to range_budget
range_budget = movies.production_budget.max() - movies.production_budget.min()

print(range_budget)

# Save the interquartile range to iqr_budget
iqr_budget = movies.production_budget.quantile(0.75) - movies.production_budget.quantile(0.25)

print(iqr_budget)

# Save the variance to var_budget
var_budget = movies.production_budget.var()

print(var_budget)

# Save the standard deviation to std_budget
std_budget = movies.production_budget.std()

print(std_budget)

# Save the mean absolute deviation to mad_budget
mad_budget = movies.production_budget.mad()

print(mad_budget)



Visualizing Quantitative Variables
While summary statistics are certainly helpful for exploring and quantifying a feature, 
we might find it hard to wrap our minds around a bunch of numbers. This is why data visualization is such 
a powerful element of EDA.

For quantitative variables, boxplots and histograms are two common visualizations. 
These plots are useful because they simultaneously communicate information about minimum and maximum values, 
central location, and spread. Histograms can additionally illuminate patterns that can impact 
an analysis (e.g., skew or multimodality).

Python’s seaborn library, built on top of matplotlib, offers the boxplot() and histplot() functions 
to easily plot data from a pandas DataFrame:

import matplotlib.pyplot as plt 
import seaborn as sns

# Boxplot for rent
sns.boxplot(x='rent', data=rentals)
plt.show()
plt.close()

boxplot of rent

# Histogram for rent
sns.histplot(x='rent', data=rentals)
plt.show()
plt.close()

histogram of rent

Code:
import codecademylib3
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

movies = pd.read_csv('movies.csv')

# Create a boxplot for movie budget 
sns.boxplot(x = 'production_budget', data = movies)
plt.show()
plt.close()

# Create a histogram for movie budget
sns.histplot(x = 'production_budget', data = movies)
plt.show()
plt.close()



Value Counts for Categorical Data
When it comes to categorical variables, the measures of central tendency and spread that worked for 
describing numeric variables, 
like mean and standard deviation, generally becomes unsuitable when we’re dealing with discrete values. 
Unlike numbers, categorical values are not continuous and oftentimes do not have an intrinsic ordering.

Instead, a good way to summarize categorical variables is to generate a frequency table containing the count of 
each distinct value. For example, we may be interested to know how many of the New York City rental listings are 
from each borough. Related, we can also find which borough has the most listings.

The pandas library offers the .value_counts() method for generating the counts of all values in a DataFrame column:

# Counts of rental listings in each borough
df.borough.value_counts()

Output:

Manhattan    3539
Brooklyn     1013
Queens        448
By default, it returns the results sorted in descending order by count, where the top element is the mode, or 
the most frequently appearing value. In this case, the mode is Manhattan with 3,539 rental listings.

Code:
import pandas as pd

movies = pd.read_csv('movies.csv')

# Save the counts to genre_counts

genre_counts = movies.genre.value_counts()

print(genre_counts)




